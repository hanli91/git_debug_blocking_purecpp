/* Generated by Cython 0.23.4 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "ReuseInfoArray.h", 
            "Signal.h", 
            "TopPair.h", 
            "TopkListGenerator.h"
        ], 
        "extra_compile_args": [
            "-O3", 
            "-ffast-math", 
            "-march=native", 
            "-fopenmp", 
            "-std=c++11"
        ], 
        "extra_link_args": [
            "-fopenmp"
        ], 
        "language": "c++", 
        "libraries": [
            "m"
        ]
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_4"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__debugblock__debugblocker_cython
#define __PYX_HAVE_API__debugblock__debugblocker_cython
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include "string.h"
#include <string>
#include "stdio.h"
#include "stdint.h"
#include "TopPair.h"
#include "ReuseInfoArray.h"
#include "Signal.h"
#include "TopkListGenerator.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "debugblock/debugblocker_cython.pyx",
  "debugblock/stringsource",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.unordered_set' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'libcpp.queue' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'debugblock.debugblocker_cython' */
static void __pyx_f_10debugblock_19debugblocker_cython_generate_recom_lists(std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, std::vector<int>  const &, std::vector<int>  const &, std::vector<int>  &, std::vector<std::vector<TopPair> >  &, bool const , std::unordered_map<int,std::unordered_set<int> >  &, std::unordered_map<int,std::unordered_map<int,ReuseInfoArray> > , uint32_t, uint32_t const , uint32_t const , int const , uint32_t const , double const , uint32_t const , std::string const , std::priority_queue<TopPair> , bool const , bool const , bool const ); /*proto*/
static std::vector<std::priority_queue<TopPair> >  __pyx_f_10debugblock_19debugblocker_cython_create_heap_vector(int const ); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_copy_table_and_remove_field(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  &, int); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_remove_field(std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, int); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_convert_table_to_vector(PyObject *, std::vector<std::vector<int> >  &); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_convert_candidate_set_to_c_map(PyObject *, std::unordered_map<int,std::unordered_set<int> >  &); /*proto*/
static int __pyx_f_10debugblock_19debugblocker_cython_convert_py_list_to_vector(PyObject *, std::vector<int>  &); /*proto*/
static double __pyx_f_10debugblock_19debugblocker_cython_double_max(double const , double); /*proto*/
static double __pyx_f_10debugblock_19debugblocker_cython_init_topk_heap_calc_sim(std::vector<int>  const &, std::vector<int>  const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
#define __Pyx_MODULE_NAME "debugblock.debugblocker_cython"
int __pyx_module_is_main_debugblock__debugblocker_cython = 0;

/* Implementation of 'debugblock.debugblocker_cython' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_reversed;
static char __pyx_k_[] = "_";
static char __pyx_k_d[] = "%d";
static char __pyx_k_i[] = "i";
static char __pyx_k_s[] = "%s\n";
static char __pyx_k_w[] = "w+";
static char __pyx_k_end[] = "end";
static char __pyx_k_txt[] = ".txt";
static char __pyx_k_file[] = "file";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_time[] = "time";
static char __pyx_k_topk[] = "topk_";
static char __pyx_k_print[] = "print";
static char __pyx_k_range[] = "range";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_remove[] = "remove";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_16f_d_d[] = "%.16f %d %d\n";
static char __pyx_k_cand_set[] = "cand_set";
static char __pyx_k_end_time[] = "end time:";
static char __pyx_k_reversed[] = "reversed";
static char __pyx_k_join_time[] = "join time:";
static char __pyx_k_reuse_set[] = "reuse_set";
static char __pyx_k_use_plain[] = "use_plain";
static char __pyx_k_field_list[] = "field_list";
static char __pyx_k_ltoken_sum[] = "ltoken_sum";
static char __pyx_k_rtoken_sum[] = "rtoken_sum";
static char __pyx_k_topk_lists[] = "topk_lists";
static char __pyx_k_output_path[] = "output_path";
static char __pyx_k_output_size[] = "output_size";
static char __pyx_k_py_cand_set[] = "py_cand_set";
static char __pyx_k_py_use_plain[] = "py_use_plain";
static char __pyx_k_reuse_size_d[] = "reuse size: %d\n";
static char __pyx_k_use_new_topk[] = "use_new_topk";
static char __pyx_k_use_parallel[] = "use_parallel";
static char __pyx_k_lfield_vector[] = "lfield_vector";
static char __pyx_k_lindex_vector[] = "lindex_vector";
static char __pyx_k_ltoken_vector[] = "ltoken_vector";
static char __pyx_k_max_field_num[] = "max_field_num";
static char __pyx_k_py_num_fields[] = "py_num_fields";
static char __pyx_k_rfield_vector[] = "rfield_vector";
static char __pyx_k_rindex_vector[] = "rindex_vector";
static char __pyx_k_rtoken_vector[] = "rtoken_vector";
static char __pyx_k_too_few_lists[] = "too few lists:";
static char __pyx_k_init_topk_heap[] = "init_topk_heap";
static char __pyx_k_py_output_path[] = "py_output_path";
static char __pyx_k_py_output_size[] = "py_output_size";
static char __pyx_k_py_use_new_topk[] = "py_use_new_topk";
static char __pyx_k_py_use_parallel[] = "py_use_parallel";
static char __pyx_k_actual_max_ratio[] = "actual max ratio:";
static char __pyx_k_REC_AVE_LEN_THRES[] = "REC_AVE_LEN_THRES";
static char __pyx_k_rec_ave_len_thres[] = "rec_ave_len_thres";
static char __pyx_k_FIELD_REMOVE_RATIO[] = "FIELD_REMOVE_RATIO";
static char __pyx_k_MINIMAL_NUM_FIELDS[] = "MINIMAL_NUM_FIELDS";
static char __pyx_k_field_remove_ratio[] = "field_remove_ratio";
static char __pyx_k_lrecord_field_list[] = "lrecord_field_list";
static char __pyx_k_lrecord_index_list[] = "lrecord_index_list";
static char __pyx_k_lrecord_token_list[] = "lrecord_token_list";
static char __pyx_k_minimal_num_fields[] = "minimal_num_fields";
static char __pyx_k_rrecord_field_list[] = "rrecord_field_list";
static char __pyx_k_rrecord_index_list[] = "rrecord_index_list";
static char __pyx_k_rrecord_token_list[] = "rrecord_token_list";
static char __pyx_k_OFFSET_OF_FIELD_NUM[] = "OFFSET_OF_FIELD_NUM";
static char __pyx_k_debugblocker_cython[] = "debugblocker_cython";
static char __pyx_k_offset_of_field_num[] = "offset_of_field_num";
static char __pyx_k_PREFIX_MATCH_MAX_SIZE[] = "PREFIX_MATCH_MAX_SIZE";
static char __pyx_k_prefix_match_max_size[] = "prefix_match_max_size";
static char __pyx_k_ltable_field_token_sum[] = "ltable_field_token_sum";
static char __pyx_k_rtable_field_token_sum[] = "rtable_field_token_sum";
static char __pyx_k_required_remove_field_ratio[] = "required remove-field ratio:";
static char __pyx_k_debugblock_debugblocker_cython[] = "debugblock.debugblocker_cython";
static char __pyx_k_Users_lihan_Documents_CharmPyWo[] = "/Users/lihan/Documents/CharmPyWorkspace/debug_blocking_purecpp/debugblock/debugblocker_cython.pyx";
static PyObject *__pyx_n_s_FIELD_REMOVE_RATIO;
static PyObject *__pyx_n_s_MINIMAL_NUM_FIELDS;
static PyObject *__pyx_n_s_OFFSET_OF_FIELD_NUM;
static PyObject *__pyx_n_s_PREFIX_MATCH_MAX_SIZE;
static PyObject *__pyx_n_s_REC_AVE_LEN_THRES;
static PyObject *__pyx_kp_s_Users_lihan_Documents_CharmPyWo;
static PyObject *__pyx_kp_s_actual_max_ratio;
static PyObject *__pyx_n_s_cand_set;
static PyObject *__pyx_n_s_debugblock_debugblocker_cython;
static PyObject *__pyx_n_s_debugblocker_cython;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_kp_s_end_time;
static PyObject *__pyx_n_s_field_list;
static PyObject *__pyx_n_s_field_remove_ratio;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init_topk_heap;
static PyObject *__pyx_kp_s_join_time;
static PyObject *__pyx_n_s_lfield_vector;
static PyObject *__pyx_n_s_lindex_vector;
static PyObject *__pyx_n_s_lrecord_field_list;
static PyObject *__pyx_n_s_lrecord_index_list;
static PyObject *__pyx_n_s_lrecord_token_list;
static PyObject *__pyx_n_s_ltable_field_token_sum;
static PyObject *__pyx_n_s_ltoken_sum;
static PyObject *__pyx_n_s_ltoken_vector;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_field_num;
static PyObject *__pyx_n_s_minimal_num_fields;
static PyObject *__pyx_n_s_offset_of_field_num;
static PyObject *__pyx_n_s_output_path;
static PyObject *__pyx_n_s_output_size;
static PyObject *__pyx_n_s_prefix_match_max_size;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_py_cand_set;
static PyObject *__pyx_n_s_py_num_fields;
static PyObject *__pyx_n_s_py_output_path;
static PyObject *__pyx_n_s_py_output_size;
static PyObject *__pyx_n_s_py_use_new_topk;
static PyObject *__pyx_n_s_py_use_parallel;
static PyObject *__pyx_n_s_py_use_plain;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rec_ave_len_thres;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_kp_s_required_remove_field_ratio;
static PyObject *__pyx_n_s_reuse_set;
static PyObject *__pyx_n_s_reversed;
static PyObject *__pyx_n_s_rfield_vector;
static PyObject *__pyx_n_s_rindex_vector;
static PyObject *__pyx_n_s_rrecord_field_list;
static PyObject *__pyx_n_s_rrecord_index_list;
static PyObject *__pyx_n_s_rrecord_token_list;
static PyObject *__pyx_n_s_rtable_field_token_sum;
static PyObject *__pyx_n_s_rtoken_sum;
static PyObject *__pyx_n_s_rtoken_vector;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_kp_s_too_few_lists;
static PyObject *__pyx_n_s_topk_lists;
static PyObject *__pyx_n_s_use_new_topk;
static PyObject *__pyx_n_s_use_parallel;
static PyObject *__pyx_n_s_use_plain;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_pf_10debugblock_19debugblocker_cython_debugblocker_cython(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_lrecord_token_list, PyObject *__pyx_v_rrecord_token_list, PyObject *__pyx_v_lrecord_index_list, PyObject *__pyx_v_rrecord_index_list, PyObject *__pyx_v_lrecord_field_list, PyObject *__pyx_v_rrecord_field_list, PyObject *__pyx_v_ltable_field_token_sum, PyObject *__pyx_v_rtable_field_token_sum, PyObject *__pyx_v_py_cand_set, PyObject *__pyx_v_py_num_fields, PyObject *__pyx_v_py_output_size, PyObject *__pyx_v_py_output_path, PyObject *__pyx_v_py_use_plain, PyObject *__pyx_v_py_use_new_topk, PyObject *__pyx_v_py_use_parallel); /* proto */
static PyObject *__pyx_float_0_1;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_20;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_codeobj__3;

/* "debugblock/debugblocker_cython.pyx":70
 * FIELD_REMOVE_RATIO = 0.1
 * 
 * def debugblocker_cython(lrecord_token_list, rrecord_token_list,             # <<<<<<<<<<<<<<
 *                         lrecord_index_list, rrecord_index_list,
 *                         lrecord_field_list, rrecord_field_list,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10debugblock_19debugblocker_cython_1debugblocker_cython(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10debugblock_19debugblocker_cython_1debugblocker_cython = {"debugblocker_cython", (PyCFunction)__pyx_pw_10debugblock_19debugblocker_cython_1debugblocker_cython, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10debugblock_19debugblocker_cython_1debugblocker_cython(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_lrecord_token_list = 0;
  PyObject *__pyx_v_rrecord_token_list = 0;
  PyObject *__pyx_v_lrecord_index_list = 0;
  PyObject *__pyx_v_rrecord_index_list = 0;
  PyObject *__pyx_v_lrecord_field_list = 0;
  PyObject *__pyx_v_rrecord_field_list = 0;
  PyObject *__pyx_v_ltable_field_token_sum = 0;
  PyObject *__pyx_v_rtable_field_token_sum = 0;
  PyObject *__pyx_v_py_cand_set = 0;
  PyObject *__pyx_v_py_num_fields = 0;
  PyObject *__pyx_v_py_output_size = 0;
  PyObject *__pyx_v_py_output_path = 0;
  PyObject *__pyx_v_py_use_plain = 0;
  PyObject *__pyx_v_py_use_new_topk = 0;
  PyObject *__pyx_v_py_use_parallel = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("debugblocker_cython (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lrecord_token_list,&__pyx_n_s_rrecord_token_list,&__pyx_n_s_lrecord_index_list,&__pyx_n_s_rrecord_index_list,&__pyx_n_s_lrecord_field_list,&__pyx_n_s_rrecord_field_list,&__pyx_n_s_ltable_field_token_sum,&__pyx_n_s_rtable_field_token_sum,&__pyx_n_s_py_cand_set,&__pyx_n_s_py_num_fields,&__pyx_n_s_py_output_size,&__pyx_n_s_py_output_path,&__pyx_n_s_py_use_plain,&__pyx_n_s_py_use_new_topk,&__pyx_n_s_py_use_parallel,0};
    PyObject* values[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lrecord_token_list)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rrecord_token_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 15, 15, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lrecord_index_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 15, 15, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rrecord_index_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 15, 15, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lrecord_field_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 15, 15, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rrecord_field_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 15, 15, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ltable_field_token_sum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 15, 15, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rtable_field_token_sum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 15, 15, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_cand_set)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 15, 15, 8); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_num_fields)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 15, 15, 9); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_output_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 15, 15, 10); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_output_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 15, 15, 11); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_use_plain)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 15, 15, 12); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_use_new_topk)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 15, 15, 13); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_use_parallel)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 15, 15, 14); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "debugblocker_cython") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 15) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
    }
    __pyx_v_lrecord_token_list = values[0];
    __pyx_v_rrecord_token_list = values[1];
    __pyx_v_lrecord_index_list = values[2];
    __pyx_v_rrecord_index_list = values[3];
    __pyx_v_lrecord_field_list = values[4];
    __pyx_v_rrecord_field_list = values[5];
    __pyx_v_ltable_field_token_sum = values[6];
    __pyx_v_rtable_field_token_sum = values[7];
    __pyx_v_py_cand_set = values[8];
    __pyx_v_py_num_fields = values[9];
    __pyx_v_py_output_size = values[10];
    __pyx_v_py_output_path = values[11];
    __pyx_v_py_use_plain = values[12];
    __pyx_v_py_use_new_topk = values[13];
    __pyx_v_py_use_parallel = values[14];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 15, 15, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("debugblock.debugblocker_cython.debugblocker_cython", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10debugblock_19debugblocker_cython_debugblocker_cython(__pyx_self, __pyx_v_lrecord_token_list, __pyx_v_rrecord_token_list, __pyx_v_lrecord_index_list, __pyx_v_rrecord_index_list, __pyx_v_lrecord_field_list, __pyx_v_rrecord_field_list, __pyx_v_ltable_field_token_sum, __pyx_v_rtable_field_token_sum, __pyx_v_py_cand_set, __pyx_v_py_num_fields, __pyx_v_py_output_size, __pyx_v_py_output_path, __pyx_v_py_use_plain, __pyx_v_py_use_new_topk, __pyx_v_py_use_parallel);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10debugblock_19debugblocker_cython_debugblocker_cython(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_lrecord_token_list, PyObject *__pyx_v_rrecord_token_list, PyObject *__pyx_v_lrecord_index_list, PyObject *__pyx_v_rrecord_index_list, PyObject *__pyx_v_lrecord_field_list, PyObject *__pyx_v_rrecord_field_list, PyObject *__pyx_v_ltable_field_token_sum, PyObject *__pyx_v_rtable_field_token_sum, PyObject *__pyx_v_py_cand_set, PyObject *__pyx_v_py_num_fields, PyObject *__pyx_v_py_output_size, PyObject *__pyx_v_py_output_path, PyObject *__pyx_v_py_use_plain, PyObject *__pyx_v_py_use_new_topk, PyObject *__pyx_v_py_use_parallel) {
  std::string __pyx_v_output_path;
  bool __pyx_v_use_plain;
  bool __pyx_v_use_new_topk;
  bool __pyx_v_use_parallel;
  std::vector<std::vector<int> >  __pyx_v_ltoken_vector;
  std::vector<std::vector<int> >  __pyx_v_rtoken_vector;
  std::vector<std::vector<int> >  __pyx_v_lindex_vector;
  std::vector<std::vector<int> >  __pyx_v_rindex_vector;
  std::vector<std::vector<int> >  __pyx_v_lfield_vector;
  std::vector<std::vector<int> >  __pyx_v_rfield_vector;
  std::vector<int>  __pyx_v_ltoken_sum;
  std::vector<int>  __pyx_v_rtoken_sum;
  std::unordered_map<int,std::unordered_set<int> >  __pyx_v_cand_set;
  std::vector<int>  __pyx_v_field_list;
  PyObject *__pyx_v_i = NULL;
  uint32_t __pyx_v_output_size;
  uint32_t __pyx_v_prefix_match_max_size;
  uint32_t __pyx_v_rec_ave_len_thres;
  uint32_t __pyx_v_offset_of_field_num;
  uint32_t __pyx_v_minimal_num_fields;
  double __pyx_v_field_remove_ratio;
  std::vector<std::vector<TopPair> >  __pyx_v_topk_lists;
  std::unordered_map<int,std::unordered_map<int,ReuseInfoArray> >  __pyx_v_reuse_set;
  std::priority_queue<TopPair>  __pyx_v_init_topk_heap;
  int __pyx_v_max_field_num;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  uint32_t __pyx_t_8;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("debugblocker_cython", 0);
  __Pyx_INCREF(__pyx_v_lrecord_token_list);
  __Pyx_INCREF(__pyx_v_rrecord_token_list);
  __Pyx_INCREF(__pyx_v_lrecord_index_list);
  __Pyx_INCREF(__pyx_v_rrecord_index_list);
  __Pyx_INCREF(__pyx_v_lrecord_field_list);
  __Pyx_INCREF(__pyx_v_rrecord_field_list);
  __Pyx_INCREF(__pyx_v_py_cand_set);

  /* "debugblock/debugblocker_cython.pyx":76
 *                         py_num_fields, py_output_size, py_output_path, py_use_plain,
 *                         py_use_new_topk, py_use_parallel):
 *     cdef string output_path = py_output_path             # <<<<<<<<<<<<<<
 *     cdef bool use_plain = py_use_plain
 *     cdef bool use_new_topk = py_use_new_topk
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_py_output_path); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_output_path = __pyx_t_1;

  /* "debugblock/debugblocker_cython.pyx":77
 *                         py_use_new_topk, py_use_parallel):
 *     cdef string output_path = py_output_path
 *     cdef bool use_plain = py_use_plain             # <<<<<<<<<<<<<<
 *     cdef bool use_new_topk = py_use_new_topk
 *     cdef bool use_parallel = py_use_parallel
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_py_use_plain); if (unlikely((__pyx_t_2 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_use_plain = __pyx_t_2;

  /* "debugblock/debugblocker_cython.pyx":78
 *     cdef string output_path = py_output_path
 *     cdef bool use_plain = py_use_plain
 *     cdef bool use_new_topk = py_use_new_topk             # <<<<<<<<<<<<<<
 *     cdef bool use_parallel = py_use_parallel
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_py_use_new_topk); if (unlikely((__pyx_t_2 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_use_new_topk = __pyx_t_2;

  /* "debugblock/debugblocker_cython.pyx":79
 *     cdef bool use_plain = py_use_plain
 *     cdef bool use_new_topk = py_use_new_topk
 *     cdef bool use_parallel = py_use_parallel             # <<<<<<<<<<<<<<
 * 
 *     ### Convert py objs to c++ objs
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_py_use_parallel); if (unlikely((__pyx_t_2 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_use_parallel = __pyx_t_2;

  /* "debugblock/debugblocker_cython.pyx":83
 *     ### Convert py objs to c++ objs
 *     cdef vector[vector[int]] ltoken_vector, rtoken_vector
 *     convert_table_to_vector(lrecord_token_list, ltoken_vector)             # <<<<<<<<<<<<<<
 *     convert_table_to_vector(rrecord_token_list, rtoken_vector)
 * 
 */
  __pyx_f_10debugblock_19debugblocker_cython_convert_table_to_vector(__pyx_v_lrecord_token_list, __pyx_v_ltoken_vector);

  /* "debugblock/debugblocker_cython.pyx":84
 *     cdef vector[vector[int]] ltoken_vector, rtoken_vector
 *     convert_table_to_vector(lrecord_token_list, ltoken_vector)
 *     convert_table_to_vector(rrecord_token_list, rtoken_vector)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[vector[int]] lindex_vector, rindex_vector
 */
  __pyx_f_10debugblock_19debugblocker_cython_convert_table_to_vector(__pyx_v_rrecord_token_list, __pyx_v_rtoken_vector);

  /* "debugblock/debugblocker_cython.pyx":87
 * 
 *     cdef vector[vector[int]] lindex_vector, rindex_vector
 *     convert_table_to_vector(lrecord_index_list, lindex_vector)             # <<<<<<<<<<<<<<
 *     convert_table_to_vector(rrecord_index_list, rindex_vector)
 * 
 */
  __pyx_f_10debugblock_19debugblocker_cython_convert_table_to_vector(__pyx_v_lrecord_index_list, __pyx_v_lindex_vector);

  /* "debugblock/debugblocker_cython.pyx":88
 *     cdef vector[vector[int]] lindex_vector, rindex_vector
 *     convert_table_to_vector(lrecord_index_list, lindex_vector)
 *     convert_table_to_vector(rrecord_index_list, rindex_vector)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[vector[int]] lfield_vector, rfield_vector
 */
  __pyx_f_10debugblock_19debugblocker_cython_convert_table_to_vector(__pyx_v_rrecord_index_list, __pyx_v_rindex_vector);

  /* "debugblock/debugblocker_cython.pyx":91
 * 
 *     cdef vector[vector[int]] lfield_vector, rfield_vector
 *     convert_table_to_vector(lrecord_field_list, lfield_vector)             # <<<<<<<<<<<<<<
 *     convert_table_to_vector(rrecord_field_list, rfield_vector)
 * 
 */
  __pyx_f_10debugblock_19debugblocker_cython_convert_table_to_vector(__pyx_v_lrecord_field_list, __pyx_v_lfield_vector);

  /* "debugblock/debugblocker_cython.pyx":92
 *     cdef vector[vector[int]] lfield_vector, rfield_vector
 *     convert_table_to_vector(lrecord_field_list, lfield_vector)
 *     convert_table_to_vector(rrecord_field_list, rfield_vector)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[int] ltoken_sum, rtoken_sum
 */
  __pyx_f_10debugblock_19debugblocker_cython_convert_table_to_vector(__pyx_v_rrecord_field_list, __pyx_v_rfield_vector);

  /* "debugblock/debugblocker_cython.pyx":95
 * 
 *     cdef vector[int] ltoken_sum, rtoken_sum
 *     convert_py_list_to_vector(ltable_field_token_sum, ltoken_sum)             # <<<<<<<<<<<<<<
 *     convert_py_list_to_vector(rtable_field_token_sum, rtoken_sum)
 * 
 */
  __pyx_f_10debugblock_19debugblocker_cython_convert_py_list_to_vector(__pyx_v_ltable_field_token_sum, __pyx_v_ltoken_sum);

  /* "debugblock/debugblocker_cython.pyx":96
 *     cdef vector[int] ltoken_sum, rtoken_sum
 *     convert_py_list_to_vector(ltable_field_token_sum, ltoken_sum)
 *     convert_py_list_to_vector(rtable_field_token_sum, rtoken_sum)             # <<<<<<<<<<<<<<
 * 
 *     cdef cmap[int, cset[int]] cand_set
 */
  __pyx_f_10debugblock_19debugblocker_cython_convert_py_list_to_vector(__pyx_v_rtable_field_token_sum, __pyx_v_rtoken_sum);

  /* "debugblock/debugblocker_cython.pyx":99
 * 
 *     cdef cmap[int, cset[int]] cand_set
 *     convert_candidate_set_to_c_map(py_cand_set, cand_set)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[int] field_list
 */
  __pyx_f_10debugblock_19debugblocker_cython_convert_candidate_set_to_c_map(__pyx_v_py_cand_set, __pyx_v_cand_set);

  /* "debugblock/debugblocker_cython.pyx":102
 * 
 *     cdef vector[int] field_list
 *     for i in range(py_num_fields):             # <<<<<<<<<<<<<<
 *         field_list.push_back(i)
 * 
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_py_num_fields);
  __Pyx_GIVEREF(__pyx_v_py_num_fields);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_py_num_fields);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "debugblock/debugblocker_cython.pyx":103
 *     cdef vector[int] field_list
 *     for i in range(py_num_fields):
 *         field_list.push_back(i)             # <<<<<<<<<<<<<<
 * 
 *     cdef uint output_size = py_output_size
 */
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    try {
      __pyx_v_field_list.push_back(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "debugblock/debugblocker_cython.pyx":102
 * 
 *     cdef vector[int] field_list
 *     for i in range(py_num_fields):             # <<<<<<<<<<<<<<
 *         field_list.push_back(i)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "debugblock/debugblocker_cython.pyx":105
 *         field_list.push_back(i)
 * 
 *     cdef uint output_size = py_output_size             # <<<<<<<<<<<<<<
 *     cdef uint prefix_match_max_size = PREFIX_MATCH_MAX_SIZE
 *     cdef uint rec_ave_len_thres = REC_AVE_LEN_THRES
 */
  __pyx_t_8 = __Pyx_PyInt_As_uint32_t(__pyx_v_py_output_size); if (unlikely((__pyx_t_8 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_output_size = __pyx_t_8;

  /* "debugblock/debugblocker_cython.pyx":106
 * 
 *     cdef uint output_size = py_output_size
 *     cdef uint prefix_match_max_size = PREFIX_MATCH_MAX_SIZE             # <<<<<<<<<<<<<<
 *     cdef uint rec_ave_len_thres = REC_AVE_LEN_THRES
 *     cdef uint offset_of_field_num = OFFSET_OF_FIELD_NUM
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PREFIX_MATCH_MAX_SIZE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyInt_As_uint32_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_prefix_match_max_size = __pyx_t_8;

  /* "debugblock/debugblocker_cython.pyx":107
 *     cdef uint output_size = py_output_size
 *     cdef uint prefix_match_max_size = PREFIX_MATCH_MAX_SIZE
 *     cdef uint rec_ave_len_thres = REC_AVE_LEN_THRES             # <<<<<<<<<<<<<<
 *     cdef uint offset_of_field_num = OFFSET_OF_FIELD_NUM
 *     cdef uint minimal_num_fields = MINIMAL_NUM_FIELDS
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_REC_AVE_LEN_THRES); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyInt_As_uint32_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_rec_ave_len_thres = __pyx_t_8;

  /* "debugblock/debugblocker_cython.pyx":108
 *     cdef uint prefix_match_max_size = PREFIX_MATCH_MAX_SIZE
 *     cdef uint rec_ave_len_thres = REC_AVE_LEN_THRES
 *     cdef uint offset_of_field_num = OFFSET_OF_FIELD_NUM             # <<<<<<<<<<<<<<
 *     cdef uint minimal_num_fields = MINIMAL_NUM_FIELDS
 *     cdef double field_remove_ratio = FIELD_REMOVE_RATIO
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_OFFSET_OF_FIELD_NUM); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyInt_As_uint32_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_offset_of_field_num = __pyx_t_8;

  /* "debugblock/debugblocker_cython.pyx":109
 *     cdef uint rec_ave_len_thres = REC_AVE_LEN_THRES
 *     cdef uint offset_of_field_num = OFFSET_OF_FIELD_NUM
 *     cdef uint minimal_num_fields = MINIMAL_NUM_FIELDS             # <<<<<<<<<<<<<<
 *     cdef double field_remove_ratio = FIELD_REMOVE_RATIO
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_MINIMAL_NUM_FIELDS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyInt_As_uint32_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_minimal_num_fields = __pyx_t_8;

  /* "debugblock/debugblocker_cython.pyx":110
 *     cdef uint offset_of_field_num = OFFSET_OF_FIELD_NUM
 *     cdef uint minimal_num_fields = MINIMAL_NUM_FIELDS
 *     cdef double field_remove_ratio = FIELD_REMOVE_RATIO             # <<<<<<<<<<<<<<
 * 
 *     del lrecord_token_list, rrecord_token_list
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FIELD_REMOVE_RATIO); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_field_remove_ratio = __pyx_t_9;

  /* "debugblock/debugblocker_cython.pyx":112
 *     cdef double field_remove_ratio = FIELD_REMOVE_RATIO
 * 
 *     del lrecord_token_list, rrecord_token_list             # <<<<<<<<<<<<<<
 *     del lrecord_index_list, rrecord_index_list
 *     del lrecord_field_list, rrecord_field_list
 */
  __Pyx_DECREF(__pyx_v_lrecord_token_list);
  __pyx_v_lrecord_token_list = NULL;
  __Pyx_DECREF(__pyx_v_rrecord_token_list);
  __pyx_v_rrecord_token_list = NULL;

  /* "debugblock/debugblocker_cython.pyx":113
 * 
 *     del lrecord_token_list, rrecord_token_list
 *     del lrecord_index_list, rrecord_index_list             # <<<<<<<<<<<<<<
 *     del lrecord_field_list, rrecord_field_list
 *     del py_cand_set
 */
  __Pyx_DECREF(__pyx_v_lrecord_index_list);
  __pyx_v_lrecord_index_list = NULL;
  __Pyx_DECREF(__pyx_v_rrecord_index_list);
  __pyx_v_rrecord_index_list = NULL;

  /* "debugblock/debugblocker_cython.pyx":114
 *     del lrecord_token_list, rrecord_token_list
 *     del lrecord_index_list, rrecord_index_list
 *     del lrecord_field_list, rrecord_field_list             # <<<<<<<<<<<<<<
 *     del py_cand_set
 * 
 */
  __Pyx_DECREF(__pyx_v_lrecord_field_list);
  __pyx_v_lrecord_field_list = NULL;
  __Pyx_DECREF(__pyx_v_rrecord_field_list);
  __pyx_v_rrecord_field_list = NULL;

  /* "debugblock/debugblocker_cython.pyx":115
 *     del lrecord_index_list, rrecord_index_list
 *     del lrecord_field_list, rrecord_field_list
 *     del py_cand_set             # <<<<<<<<<<<<<<
 * 
 *     ### Generate recommendation topk lists
 */
  __Pyx_DECREF(__pyx_v_py_cand_set);
  __pyx_v_py_cand_set = NULL;

  /* "debugblock/debugblocker_cython.pyx":122
 *     cdef heap[TopPair] init_topk_heap
 * 
 *     cdef int max_field_num = field_list.size()             # <<<<<<<<<<<<<<
 * 
 *     generate_recom_lists(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,
 */
  __pyx_v_max_field_num = __pyx_v_field_list.size();

  /* "debugblock/debugblocker_cython.pyx":124
 *     cdef int max_field_num = field_list.size()
 * 
 *     generate_recom_lists(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,             # <<<<<<<<<<<<<<
 *                          lfield_vector, rfield_vector,
 *                          ltoken_sum, rtoken_sum, field_list, topk_lists,
 */
  __pyx_f_10debugblock_19debugblocker_cython_generate_recom_lists(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_lindex_vector, __pyx_v_rindex_vector, __pyx_v_lfield_vector, __pyx_v_rfield_vector, __pyx_v_ltoken_sum, __pyx_v_rtoken_sum, __pyx_v_field_list, __pyx_v_topk_lists, 1, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_prefix_match_max_size, __pyx_v_rec_ave_len_thres, __pyx_v_offset_of_field_num, __pyx_v_max_field_num, __pyx_v_minimal_num_fields, __pyx_v_field_remove_ratio, __pyx_v_output_size, __pyx_v_output_path, __pyx_v_init_topk_heap, __pyx_v_use_plain, __pyx_v_use_new_topk, __pyx_v_use_parallel);

  /* "debugblock/debugblocker_cython.pyx":70
 * FIELD_REMOVE_RATIO = 0.1
 * 
 * def debugblocker_cython(lrecord_token_list, rrecord_token_list,             # <<<<<<<<<<<<<<
 *                         lrecord_index_list, rrecord_index_list,
 *                         lrecord_field_list, rrecord_field_list,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("debugblock.debugblocker_cython.debugblocker_cython", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_lrecord_token_list);
  __Pyx_XDECREF(__pyx_v_rrecord_token_list);
  __Pyx_XDECREF(__pyx_v_lrecord_index_list);
  __Pyx_XDECREF(__pyx_v_rrecord_index_list);
  __Pyx_XDECREF(__pyx_v_lrecord_field_list);
  __Pyx_XDECREF(__pyx_v_rrecord_field_list);
  __Pyx_XDECREF(__pyx_v_py_cand_set);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "debugblock/debugblocker_cython.pyx":133
 * 
 * 
 * cdef void generate_recom_lists(vector[vector[int]]& ltoken_vector, vector[vector[int]]& rtoken_vector,             # <<<<<<<<<<<<<<
 *                                vector[vector[int]]& lindex_vector, vector[vector[int]]& rindex_vector,
 *                                vector[vector[int]]& lfield_vector, vector[vector[int]]& rfield_vector,
 */

static void __pyx_f_10debugblock_19debugblocker_cython_generate_recom_lists(std::vector<std::vector<int> >  &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  &__pyx_v_rtoken_vector, std::vector<std::vector<int> >  &__pyx_v_lindex_vector, std::vector<std::vector<int> >  &__pyx_v_rindex_vector, std::vector<std::vector<int> >  &__pyx_v_lfield_vector, std::vector<std::vector<int> >  &__pyx_v_rfield_vector, std::vector<int>  const &__pyx_v_ltoken_sum_vector, std::vector<int>  const &__pyx_v_rtoken_sum_vector, std::vector<int>  &__pyx_v_field_list, std::vector<std::vector<TopPair> >  &__pyx_v_topk_lists, bool const __pyx_v_first_run, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::unordered_map<int,std::unordered_map<int,ReuseInfoArray> >  __pyx_v_reuse_set, uint32_t __pyx_v_prefix_match_max_size, uint32_t const __pyx_v_rec_ave_len_thres, uint32_t const __pyx_v_offset_of_field_num, int const __pyx_v_max_field_num, uint32_t const __pyx_v_minimal_num_fields, double const __pyx_v_field_remove_ratio, uint32_t const __pyx_v_output_size, std::string const __pyx_v_output_path, std::priority_queue<TopPair>  __pyx_v_init_topk_heap, bool const __pyx_v_activate_reusing_module, bool const __pyx_v_use_new_topk, bool const __pyx_v_use_parallel) {
  TopkListGenerator __pyx_v_generator;
  PyObject *__pyx_v_start = NULL;
  uint32_t __pyx_v_i;
  int __pyx_v_p;
  std::vector<std::priority_queue<TopPair> >  __pyx_v_heap_vector;
  Signal __pyx_v_signal;
  Signal __pyx_v_temp_signal;
  std::vector<std::unordered_map<int,std::unordered_map<int,ReuseInfoArray> > >  __pyx_v_para_reuse_set;
  std::vector<std::vector<std::priority_queue<TopPair> > >  __pyx_v_para_heap_vector;
  std::vector<int>  __pyx_v_para_prefix_vector;
  std::unordered_map<int,int>  __pyx_v_para_prefix_map;
  PyObject *__pyx_v_end = NULL;
  double __pyx_v_max_ratio;
  uint32_t __pyx_v_ltoken_total_sum;
  uint32_t __pyx_v_rtoken_total_sum;
  int __pyx_v_removed_field_index;
  CYTHON_UNUSED bool __pyx_v_has_long_field;
  double __pyx_v_lrec_ave_len;
  double __pyx_v_rrec_ave_len;
  double __pyx_v_ratio;
  std::vector<std::priority_queue<TopPair> >  __pyx_v_heap_vector_parallel;
  std::vector<std::vector<std::vector<int> > >  __pyx_v_ltoken_vector_parallel;
  std::vector<std::vector<std::vector<int> > >  __pyx_v_rtoken_vector_parallel;
  std::vector<std::vector<int> >  __pyx_v_field_list_parallel;
  std::vector<int>  __pyx_v_field_parallel;
  std::vector<int>  __pyx_v_temp;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  uint32_t __pyx_t_6;
  std::priority_queue<TopPair>  __pyx_t_7;
  int __pyx_t_8;
  std::unordered_map<int,std::unordered_map<int,ReuseInfoArray> >  __pyx_t_9;
  long __pyx_t_10;
  long __pyx_t_11;
  int __pyx_t_12;
  double __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  std::vector<int>  __pyx_t_16;
  std::vector<std::vector<int> >  __pyx_t_17;
  size_t __pyx_t_18;
  size_t __pyx_t_19;
  size_t __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_recom_lists", 0);

  /* "debugblock/debugblocker_cython.pyx":144
 *                                const string output_path, heap[TopPair] init_topk_heap,
 *                                const bool activate_reusing_module, const bool use_new_topk, const bool use_parallel):
 *     if field_list.size() <= minimal_num_fields:             # <<<<<<<<<<<<<<
 *         print 'too few lists:', field_list
 *         print 'end time:', time.time()
 */
  __pyx_t_1 = ((__pyx_v_field_list.size() <= __pyx_v_minimal_num_fields) != 0);
  if (__pyx_t_1) {

    /* "debugblock/debugblocker_cython.pyx":145
 *                                const bool activate_reusing_module, const bool use_new_topk, const bool use_parallel):
 *     if field_list.size() <= minimal_num_fields:
 *         print 'too few lists:', field_list             # <<<<<<<<<<<<<<
 *         print 'end time:', time.time()
 *         return
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_field_list); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_kp_s_too_few_lists);
    __Pyx_GIVEREF(__pyx_kp_s_too_few_lists);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_too_few_lists);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    if (__Pyx_Print(0, __pyx_t_3, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "debugblock/debugblocker_cython.pyx":146
 *     if field_list.size() <= minimal_num_fields:
 *         print 'too few lists:', field_list
 *         print 'end time:', time.time()             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_kp_s_end_time);
    __Pyx_GIVEREF(__pyx_kp_s_end_time);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s_end_time);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    if (__Pyx_Print(0, __pyx_t_4, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "debugblock/debugblocker_cython.pyx":147
 *         print 'too few lists:', field_list
 *         print 'end time:', time.time()
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cdef TopkListGenerator generator
 */
    goto __pyx_L0;

    /* "debugblock/debugblocker_cython.pyx":144
 *                                const string output_path, heap[TopPair] init_topk_heap,
 *                                const bool activate_reusing_module, const bool use_new_topk, const bool use_parallel):
 *     if field_list.size() <= minimal_num_fields:             # <<<<<<<<<<<<<<
 *         print 'too few lists:', field_list
 *         print 'end time:', time.time()
 */
  }

  /* "debugblock/debugblocker_cython.pyx":151
 *     cdef TopkListGenerator generator
 * 
 *     start = time.time()             # <<<<<<<<<<<<<<
 *     cdef heap[TopPair] resulted_topk_heap
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_start = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "debugblock/debugblocker_cython.pyx":157
 *     cdef int p
 *     cdef vector[heap[TopPair]] heap_vector
 *     for i in xrange(field_list.size()):             # <<<<<<<<<<<<<<
 *         heap_vector.push_back(heap[TopPair]())
 * 
 */
  __pyx_t_5 = __pyx_v_field_list.size();
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "debugblock/debugblocker_cython.pyx":158
 *     cdef vector[heap[TopPair]] heap_vector
 *     for i in xrange(field_list.size()):
 *         heap_vector.push_back(heap[TopPair]())             # <<<<<<<<<<<<<<
 * 
 *     cdef Signal signal
 */
    try {
      __pyx_t_7 = std::priority_queue<TopPair> ();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_heap_vector.push_back(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "debugblock/debugblocker_cython.pyx":168
 *     cdef cmap[int, int] para_prefix_map
 * 
 *     if use_new_topk and first_run:             # <<<<<<<<<<<<<<
 *         para_prefix_vector.push_back(0)
 *         para_prefix_vector.push_back(3)
 */
  __pyx_t_8 = (__pyx_v_use_new_topk != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_1 = __pyx_t_8;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_8 = (__pyx_v_first_run != 0);
  __pyx_t_1 = __pyx_t_8;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "debugblock/debugblocker_cython.pyx":169
 * 
 *     if use_new_topk and first_run:
 *         para_prefix_vector.push_back(0)             # <<<<<<<<<<<<<<
 *         para_prefix_vector.push_back(3)
 *         para_prefix_vector.push_back(4)
 */
    try {
      __pyx_v_para_prefix_vector.push_back(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "debugblock/debugblocker_cython.pyx":170
 *     if use_new_topk and first_run:
 *         para_prefix_vector.push_back(0)
 *         para_prefix_vector.push_back(3)             # <<<<<<<<<<<<<<
 *         para_prefix_vector.push_back(4)
 *         para_prefix_vector.push_back(5)
 */
    try {
      __pyx_v_para_prefix_vector.push_back(3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "debugblock/debugblocker_cython.pyx":171
 *         para_prefix_vector.push_back(0)
 *         para_prefix_vector.push_back(3)
 *         para_prefix_vector.push_back(4)             # <<<<<<<<<<<<<<
 *         para_prefix_vector.push_back(5)
 *         para_prefix_map[0] = 0
 */
    try {
      __pyx_v_para_prefix_vector.push_back(4);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "debugblock/debugblocker_cython.pyx":172
 *         para_prefix_vector.push_back(3)
 *         para_prefix_vector.push_back(4)
 *         para_prefix_vector.push_back(5)             # <<<<<<<<<<<<<<
 *         para_prefix_map[0] = 0
 *         para_prefix_map[3] = 1
 */
    try {
      __pyx_v_para_prefix_vector.push_back(5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "debugblock/debugblocker_cython.pyx":173
 *         para_prefix_vector.push_back(4)
 *         para_prefix_vector.push_back(5)
 *         para_prefix_map[0] = 0             # <<<<<<<<<<<<<<
 *         para_prefix_map[3] = 1
 *         para_prefix_map[4] = 2
 */
    (__pyx_v_para_prefix_map[0]) = 0;

    /* "debugblock/debugblocker_cython.pyx":174
 *         para_prefix_vector.push_back(5)
 *         para_prefix_map[0] = 0
 *         para_prefix_map[3] = 1             # <<<<<<<<<<<<<<
 *         para_prefix_map[4] = 2
 *         para_prefix_map[5] = 3
 */
    (__pyx_v_para_prefix_map[3]) = 1;

    /* "debugblock/debugblocker_cython.pyx":175
 *         para_prefix_map[0] = 0
 *         para_prefix_map[3] = 1
 *         para_prefix_map[4] = 2             # <<<<<<<<<<<<<<
 *         para_prefix_map[5] = 3
 *         for i in xrange(4):
 */
    (__pyx_v_para_prefix_map[4]) = 2;

    /* "debugblock/debugblocker_cython.pyx":176
 *         para_prefix_map[3] = 1
 *         para_prefix_map[4] = 2
 *         para_prefix_map[5] = 3             # <<<<<<<<<<<<<<
 *         for i in xrange(4):
 *             para_reuse_set.push_back(cmap[int, cmap[int, ReuseInfoArray]]())
 */
    (__pyx_v_para_prefix_map[5]) = 3;

    /* "debugblock/debugblocker_cython.pyx":177
 *         para_prefix_map[4] = 2
 *         para_prefix_map[5] = 3
 *         for i in xrange(4):             # <<<<<<<<<<<<<<
 *             para_reuse_set.push_back(cmap[int, cmap[int, ReuseInfoArray]]())
 *             para_heap_vector.push_back(create_heap_vector(field_list.size()))
 */
    for (__pyx_t_6 = 0; __pyx_t_6 < 4; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "debugblock/debugblocker_cython.pyx":178
 *         para_prefix_map[5] = 3
 *         for i in xrange(4):
 *             para_reuse_set.push_back(cmap[int, cmap[int, ReuseInfoArray]]())             # <<<<<<<<<<<<<<
 *             para_heap_vector.push_back(create_heap_vector(field_list.size()))
 * 
 */
      try {
        __pyx_t_9 = std::unordered_map<int,std::unordered_map<int,ReuseInfoArray> > ();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        __pyx_v_para_reuse_set.push_back(__pyx_t_9);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "debugblock/debugblocker_cython.pyx":179
 *         for i in xrange(4):
 *             para_reuse_set.push_back(cmap[int, cmap[int, ReuseInfoArray]]())
 *             para_heap_vector.push_back(create_heap_vector(field_list.size()))             # <<<<<<<<<<<<<<
 * 
 *         with nogil, parallel(num_threads=4):
 */
      try {
        __pyx_v_para_heap_vector.push_back(__pyx_f_10debugblock_19debugblocker_cython_create_heap_vector(__pyx_v_field_list.size()));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }

    /* "debugblock/debugblocker_cython.pyx":181
 *             para_heap_vector.push_back(create_heap_vector(field_list.size()))
 * 
 *         with nogil, parallel(num_threads=4):             # <<<<<<<<<<<<<<
 *             for p in prange(4):
 *                 generator.generate_topklist_for_config(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {
          {
              #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                  #undef likely
                  #undef unlikely
                  #define likely(x)   (x)
                  #define unlikely(x) (x)
              #endif
              #ifdef _OPENMP
              #pragma omp parallel  private(__pyx_t_10, __pyx_t_11) num_threads(4)
              #endif /* _OPENMP */
              {

                  /* "debugblock/debugblocker_cython.pyx":182
 * 
 *         with nogil, parallel(num_threads=4):
 *             for p in prange(4):             # <<<<<<<<<<<<<<
 *                 generator.generate_topklist_for_config(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,
 *                                                        lfield_vector, rfield_vector, ltoken_sum_vector, rtoken_sum_vector,
 */
                  if (1 == 0) abort();
                  {
                      __pyx_t_11 = (4 - 0) / 1;
                      if (__pyx_t_11 > 0)
                      {
                          #ifdef _OPENMP
                          #pragma omp for firstprivate(__pyx_v_p) lastprivate(__pyx_v_p)
                          #endif /* _OPENMP */
                          for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_11; __pyx_t_10++){
                              {
                                  __pyx_v_p = 0 + 1 * __pyx_t_10;

                                  /* "debugblock/debugblocker_cython.pyx":183
 *         with nogil, parallel(num_threads=4):
 *             for p in prange(4):
 *                 generator.generate_topklist_for_config(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,             # <<<<<<<<<<<<<<
 *                                                        lfield_vector, rfield_vector, ltoken_sum_vector, rtoken_sum_vector,
 *                                                        field_list, max_field_num, 0, first_run, signal, cand_set,
 */
                                  __pyx_v_generator.generate_topklist_for_config(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_lindex_vector, __pyx_v_rindex_vector, __pyx_v_lfield_vector, __pyx_v_rfield_vector, __pyx_v_ltoken_sum_vector, __pyx_v_rtoken_sum_vector, __pyx_v_field_list, __pyx_v_max_field_num, 0, __pyx_v_first_run, __pyx_v_signal, __pyx_v_cand_set, (__pyx_v_para_reuse_set[__pyx_v_p]), (__pyx_v_para_heap_vector[__pyx_v_p]), __pyx_v_init_topk_heap, (__pyx_v_para_prefix_vector[__pyx_v_p]), __pyx_v_rec_ave_len_thres, __pyx_v_output_size, __pyx_v_activate_reusing_module, 0, __pyx_v_output_path);
                              }
                          }
                      }
                  }
              }
          }
          #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
              #undef likely
              #undef unlikely
              #define likely(x)   __builtin_expect(!!(x), 1)
              #define unlikely(x) __builtin_expect(!!(x), 0)
          #endif
        }

        /* "debugblock/debugblocker_cython.pyx":181
 *             para_heap_vector.push_back(create_heap_vector(field_list.size()))
 * 
 *         with nogil, parallel(num_threads=4):             # <<<<<<<<<<<<<<
 *             for p in prange(4):
 *                 generator.generate_topklist_for_config(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L13;
          }
          __pyx_L13:;
        }
    }

    /* "debugblock/debugblocker_cython.pyx":189
 *                                                        init_topk_heap, para_prefix_vector[p], rec_ave_len_thres, output_size,
 *                                                        activate_reusing_module, 0, output_path)
 *         prefix_match_max_size = signal.value             # <<<<<<<<<<<<<<
 *         heap_vector = para_heap_vector[para_prefix_map[signal.value]]
 *         reuse_set = para_reuse_set[para_prefix_map[signal.value]]
 */
    __pyx_t_12 = __pyx_v_signal.value;
    __pyx_v_prefix_match_max_size = __pyx_t_12;

    /* "debugblock/debugblocker_cython.pyx":190
 *                                                        activate_reusing_module, 0, output_path)
 *         prefix_match_max_size = signal.value
 *         heap_vector = para_heap_vector[para_prefix_map[signal.value]]             # <<<<<<<<<<<<<<
 *         reuse_set = para_reuse_set[para_prefix_map[signal.value]]
 *     else:
 */
    __pyx_v_heap_vector = (__pyx_v_para_heap_vector[(__pyx_v_para_prefix_map[__pyx_v_signal.value])]);

    /* "debugblock/debugblocker_cython.pyx":191
 *         prefix_match_max_size = signal.value
 *         heap_vector = para_heap_vector[para_prefix_map[signal.value]]
 *         reuse_set = para_reuse_set[para_prefix_map[signal.value]]             # <<<<<<<<<<<<<<
 *     else:
 *         generator.generate_topklist_for_config(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,
 */
    __pyx_v_reuse_set = (__pyx_v_para_reuse_set[(__pyx_v_para_prefix_map[__pyx_v_signal.value])]);

    /* "debugblock/debugblocker_cython.pyx":168
 *     cdef cmap[int, int] para_prefix_map
 * 
 *     if use_new_topk and first_run:             # <<<<<<<<<<<<<<
 *         para_prefix_vector.push_back(0)
 *         para_prefix_vector.push_back(3)
 */
    goto __pyx_L6;
  }

  /* "debugblock/debugblocker_cython.pyx":193
 *         reuse_set = para_reuse_set[para_prefix_map[signal.value]]
 *     else:
 *         generator.generate_topklist_for_config(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,             # <<<<<<<<<<<<<<
 *                                                lfield_vector, rfield_vector, ltoken_sum_vector, rtoken_sum_vector,
 *                                                field_list, max_field_num, 0, False, signal, cand_set, reuse_set, heap_vector,
 */
  /*else*/ {

    /* "debugblock/debugblocker_cython.pyx":197
 *                                                field_list, max_field_num, 0, False, signal, cand_set, reuse_set, heap_vector,
 *                                                init_topk_heap, prefix_match_max_size, rec_ave_len_thres, output_size,
 *                                                activate_reusing_module, 0, output_path)             # <<<<<<<<<<<<<<
 *     printf("reuse size: %d\n", reuse_set.size())
 * 
 */
    __pyx_v_generator.generate_topklist_for_config(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_lindex_vector, __pyx_v_rindex_vector, __pyx_v_lfield_vector, __pyx_v_rfield_vector, __pyx_v_ltoken_sum_vector, __pyx_v_rtoken_sum_vector, __pyx_v_field_list, __pyx_v_max_field_num, 0, 0, __pyx_v_signal, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_heap_vector, __pyx_v_init_topk_heap, __pyx_v_prefix_match_max_size, __pyx_v_rec_ave_len_thres, __pyx_v_output_size, __pyx_v_activate_reusing_module, 0, __pyx_v_output_path);
  }
  __pyx_L6:;

  /* "debugblock/debugblocker_cython.pyx":198
 *                                                init_topk_heap, prefix_match_max_size, rec_ave_len_thres, output_size,
 *                                                activate_reusing_module, 0, output_path)
 *     printf("reuse size: %d\n", reuse_set.size())             # <<<<<<<<<<<<<<
 * 
 *     end = time.time()
 */
  printf(__pyx_k_reuse_size_d, __pyx_v_reuse_set.size());

  /* "debugblock/debugblocker_cython.pyx":200
 *     printf("reuse size: %d\n", reuse_set.size())
 * 
 *     end = time.time()             # <<<<<<<<<<<<<<
 *     print 'join time:', end - start
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_end = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "debugblock/debugblocker_cython.pyx":201
 * 
 *     end = time.time()
 *     print 'join time:', end - start             # <<<<<<<<<<<<<<
 * 
 *     cdef double max_ratio = 0.0
 */
  __pyx_t_4 = PyNumber_Subtract(__pyx_v_end, __pyx_v_start); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_join_time);
  __Pyx_GIVEREF(__pyx_kp_s_join_time);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_join_time);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  if (__Pyx_Print(0, __pyx_t_3, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "debugblock/debugblocker_cython.pyx":203
 *     print 'join time:', end - start
 * 
 *     cdef double max_ratio = 0.0             # <<<<<<<<<<<<<<
 *     cdef uint ltoken_total_sum = 0, rtoken_total_sum = 0
 *     cdef int removed_field_index = -1
 */
  __pyx_v_max_ratio = 0.0;

  /* "debugblock/debugblocker_cython.pyx":204
 * 
 *     cdef double max_ratio = 0.0
 *     cdef uint ltoken_total_sum = 0, rtoken_total_sum = 0             # <<<<<<<<<<<<<<
 *     cdef int removed_field_index = -1
 *     cdef bool has_long_field = False
 */
  __pyx_v_ltoken_total_sum = 0;
  __pyx_v_rtoken_total_sum = 0;

  /* "debugblock/debugblocker_cython.pyx":205
 *     cdef double max_ratio = 0.0
 *     cdef uint ltoken_total_sum = 0, rtoken_total_sum = 0
 *     cdef int removed_field_index = -1             # <<<<<<<<<<<<<<
 *     cdef bool has_long_field = False
 * 
 */
  __pyx_v_removed_field_index = -1;

  /* "debugblock/debugblocker_cython.pyx":206
 *     cdef uint ltoken_total_sum = 0, rtoken_total_sum = 0
 *     cdef int removed_field_index = -1
 *     cdef bool has_long_field = False             # <<<<<<<<<<<<<<
 * 
 *     for i in range(field_list.size()):
 */
  __pyx_v_has_long_field = 0;

  /* "debugblock/debugblocker_cython.pyx":208
 *     cdef bool has_long_field = False
 * 
 *     for i in range(field_list.size()):             # <<<<<<<<<<<<<<
 *         ltoken_total_sum += ltoken_sum_vector[field_list[i]]
 *         rtoken_total_sum += rtoken_sum_vector[field_list[i]]
 */
  __pyx_t_5 = __pyx_v_field_list.size();
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "debugblock/debugblocker_cython.pyx":209
 * 
 *     for i in range(field_list.size()):
 *         ltoken_total_sum += ltoken_sum_vector[field_list[i]]             # <<<<<<<<<<<<<<
 *         rtoken_total_sum += rtoken_sum_vector[field_list[i]]
 * 
 */
    __pyx_v_ltoken_total_sum = (__pyx_v_ltoken_total_sum + (__pyx_v_ltoken_sum_vector[(__pyx_v_field_list[__pyx_v_i])]));

    /* "debugblock/debugblocker_cython.pyx":210
 *     for i in range(field_list.size()):
 *         ltoken_total_sum += ltoken_sum_vector[field_list[i]]
 *         rtoken_total_sum += rtoken_sum_vector[field_list[i]]             # <<<<<<<<<<<<<<
 * 
 *     cdef double lrec_ave_len = ltoken_total_sum * 1.0 / ltoken_vector.size()
 */
    __pyx_v_rtoken_total_sum = (__pyx_v_rtoken_total_sum + (__pyx_v_rtoken_sum_vector[(__pyx_v_field_list[__pyx_v_i])]));
  }

  /* "debugblock/debugblocker_cython.pyx":212
 *         rtoken_total_sum += rtoken_sum_vector[field_list[i]]
 * 
 *     cdef double lrec_ave_len = ltoken_total_sum * 1.0 / ltoken_vector.size()             # <<<<<<<<<<<<<<
 *     cdef double rrec_ave_len = rtoken_total_sum * 1.0 / rtoken_vector.size()
 *     cdef double ratio = 1 - (field_list.size() - 1) * field_remove_ratio / (1.0 + field_remove_ratio) *\
 */
  __pyx_t_13 = (__pyx_v_ltoken_total_sum * 1.0);
  __pyx_t_5 = __pyx_v_ltoken_vector.size();
  if (unlikely(__pyx_t_5 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_lrec_ave_len = (__pyx_t_13 / __pyx_t_5);

  /* "debugblock/debugblocker_cython.pyx":213
 * 
 *     cdef double lrec_ave_len = ltoken_total_sum * 1.0 / ltoken_vector.size()
 *     cdef double rrec_ave_len = rtoken_total_sum * 1.0 / rtoken_vector.size()             # <<<<<<<<<<<<<<
 *     cdef double ratio = 1 - (field_list.size() - 1) * field_remove_ratio / (1.0 + field_remove_ratio) *\
 *                  double_max(lrec_ave_len, rrec_ave_len) / (lrec_ave_len + rrec_ave_len)
 */
  __pyx_t_13 = (__pyx_v_rtoken_total_sum * 1.0);
  __pyx_t_5 = __pyx_v_rtoken_vector.size();
  if (unlikely(__pyx_t_5 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_rrec_ave_len = (__pyx_t_13 / __pyx_t_5);

  /* "debugblock/debugblocker_cython.pyx":214
 *     cdef double lrec_ave_len = ltoken_total_sum * 1.0 / ltoken_vector.size()
 *     cdef double rrec_ave_len = rtoken_total_sum * 1.0 / rtoken_vector.size()
 *     cdef double ratio = 1 - (field_list.size() - 1) * field_remove_ratio / (1.0 + field_remove_ratio) *\             # <<<<<<<<<<<<<<
 *                  double_max(lrec_ave_len, rrec_ave_len) / (lrec_ave_len + rrec_ave_len)
 *     # cdef double ratio = 0.5
 */
  __pyx_t_13 = ((__pyx_v_field_list.size() - 1) * __pyx_v_field_remove_ratio);
  __pyx_t_14 = (1.0 + __pyx_v_field_remove_ratio);
  if (unlikely(__pyx_t_14 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "debugblock/debugblocker_cython.pyx":215
 *     cdef double rrec_ave_len = rtoken_total_sum * 1.0 / rtoken_vector.size()
 *     cdef double ratio = 1 - (field_list.size() - 1) * field_remove_ratio / (1.0 + field_remove_ratio) *\
 *                  double_max(lrec_ave_len, rrec_ave_len) / (lrec_ave_len + rrec_ave_len)             # <<<<<<<<<<<<<<
 *     # cdef double ratio = 0.5
 * 
 */
  __pyx_t_15 = ((__pyx_t_13 / __pyx_t_14) * __pyx_f_10debugblock_19debugblocker_cython_double_max(__pyx_v_lrec_ave_len, __pyx_v_rrec_ave_len));
  __pyx_t_14 = (__pyx_v_lrec_ave_len + __pyx_v_rrec_ave_len);
  if (unlikely(__pyx_t_14 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "debugblock/debugblocker_cython.pyx":214
 *     cdef double lrec_ave_len = ltoken_total_sum * 1.0 / ltoken_vector.size()
 *     cdef double rrec_ave_len = rtoken_total_sum * 1.0 / rtoken_vector.size()
 *     cdef double ratio = 1 - (field_list.size() - 1) * field_remove_ratio / (1.0 + field_remove_ratio) *\             # <<<<<<<<<<<<<<
 *                  double_max(lrec_ave_len, rrec_ave_len) / (lrec_ave_len + rrec_ave_len)
 *     # cdef double ratio = 0.5
 */
  __pyx_v_ratio = (1.0 - (__pyx_t_15 / __pyx_t_14));

  /* "debugblock/debugblocker_cython.pyx":218
 *     # cdef double ratio = 0.5
 * 
 *     for i in range(field_list.size()):             # <<<<<<<<<<<<<<
 *         max_ratio = double_max(max_ratio, double_max(ltoken_sum_vector[field_list[i]] * 1.0 / ltoken_total_sum,
 *                                                      rtoken_sum_vector[field_list[i]] * 1.0 / rtoken_total_sum))
 */
  __pyx_t_5 = __pyx_v_field_list.size();
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "debugblock/debugblocker_cython.pyx":219
 * 
 *     for i in range(field_list.size()):
 *         max_ratio = double_max(max_ratio, double_max(ltoken_sum_vector[field_list[i]] * 1.0 / ltoken_total_sum,             # <<<<<<<<<<<<<<
 *                                                      rtoken_sum_vector[field_list[i]] * 1.0 / rtoken_total_sum))
 *         if ltoken_sum_vector[field_list[i]] > ltoken_total_sum * ratio or\
 */
    __pyx_t_14 = ((__pyx_v_ltoken_sum_vector[(__pyx_v_field_list[__pyx_v_i])]) * 1.0);
    if (unlikely(__pyx_v_ltoken_total_sum == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "debugblock/debugblocker_cython.pyx":220
 *     for i in range(field_list.size()):
 *         max_ratio = double_max(max_ratio, double_max(ltoken_sum_vector[field_list[i]] * 1.0 / ltoken_total_sum,
 *                                                      rtoken_sum_vector[field_list[i]] * 1.0 / rtoken_total_sum))             # <<<<<<<<<<<<<<
 *         if ltoken_sum_vector[field_list[i]] > ltoken_total_sum * ratio or\
 *                 rtoken_sum_vector[field_list[i]] > rtoken_total_sum * ratio:
 */
    __pyx_t_15 = ((__pyx_v_rtoken_sum_vector[(__pyx_v_field_list[__pyx_v_i])]) * 1.0);
    if (unlikely(__pyx_v_rtoken_total_sum == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "debugblock/debugblocker_cython.pyx":219
 * 
 *     for i in range(field_list.size()):
 *         max_ratio = double_max(max_ratio, double_max(ltoken_sum_vector[field_list[i]] * 1.0 / ltoken_total_sum,             # <<<<<<<<<<<<<<
 *                                                      rtoken_sum_vector[field_list[i]] * 1.0 / rtoken_total_sum))
 *         if ltoken_sum_vector[field_list[i]] > ltoken_total_sum * ratio or\
 */
    __pyx_v_max_ratio = __pyx_f_10debugblock_19debugblocker_cython_double_max(__pyx_v_max_ratio, __pyx_f_10debugblock_19debugblocker_cython_double_max((__pyx_t_14 / __pyx_v_ltoken_total_sum), (__pyx_t_15 / __pyx_v_rtoken_total_sum)));

    /* "debugblock/debugblocker_cython.pyx":221
 *         max_ratio = double_max(max_ratio, double_max(ltoken_sum_vector[field_list[i]] * 1.0 / ltoken_total_sum,
 *                                                      rtoken_sum_vector[field_list[i]] * 1.0 / rtoken_total_sum))
 *         if ltoken_sum_vector[field_list[i]] > ltoken_total_sum * ratio or\             # <<<<<<<<<<<<<<
 *                 rtoken_sum_vector[field_list[i]] > rtoken_total_sum * ratio:
 *             removed_field_index = i
 */
    __pyx_t_8 = (((__pyx_v_ltoken_sum_vector[(__pyx_v_field_list[__pyx_v_i])]) > (__pyx_v_ltoken_total_sum * __pyx_v_ratio)) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L31_bool_binop_done;
    }

    /* "debugblock/debugblocker_cython.pyx":222
 *                                                      rtoken_sum_vector[field_list[i]] * 1.0 / rtoken_total_sum))
 *         if ltoken_sum_vector[field_list[i]] > ltoken_total_sum * ratio or\
 *                 rtoken_sum_vector[field_list[i]] > rtoken_total_sum * ratio:             # <<<<<<<<<<<<<<
 *             removed_field_index = i
 *             has_long_field = True
 */
    __pyx_t_8 = (((__pyx_v_rtoken_sum_vector[(__pyx_v_field_list[__pyx_v_i])]) > (__pyx_v_rtoken_total_sum * __pyx_v_ratio)) != 0);
    __pyx_t_1 = __pyx_t_8;
    __pyx_L31_bool_binop_done:;

    /* "debugblock/debugblocker_cython.pyx":221
 *         max_ratio = double_max(max_ratio, double_max(ltoken_sum_vector[field_list[i]] * 1.0 / ltoken_total_sum,
 *                                                      rtoken_sum_vector[field_list[i]] * 1.0 / rtoken_total_sum))
 *         if ltoken_sum_vector[field_list[i]] > ltoken_total_sum * ratio or\             # <<<<<<<<<<<<<<
 *                 rtoken_sum_vector[field_list[i]] > rtoken_total_sum * ratio:
 *             removed_field_index = i
 */
    if (__pyx_t_1) {

      /* "debugblock/debugblocker_cython.pyx":223
 *         if ltoken_sum_vector[field_list[i]] > ltoken_total_sum * ratio or\
 *                 rtoken_sum_vector[field_list[i]] > rtoken_total_sum * ratio:
 *             removed_field_index = i             # <<<<<<<<<<<<<<
 *             has_long_field = True
 *             break
 */
      __pyx_v_removed_field_index = __pyx_v_i;

      /* "debugblock/debugblocker_cython.pyx":224
 *                 rtoken_sum_vector[field_list[i]] > rtoken_total_sum * ratio:
 *             removed_field_index = i
 *             has_long_field = True             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_has_long_field = 1;

      /* "debugblock/debugblocker_cython.pyx":225
 *             removed_field_index = i
 *             has_long_field = True
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if removed_field_index < 0:
 */
      goto __pyx_L29_break;

      /* "debugblock/debugblocker_cython.pyx":221
 *         max_ratio = double_max(max_ratio, double_max(ltoken_sum_vector[field_list[i]] * 1.0 / ltoken_total_sum,
 *                                                      rtoken_sum_vector[field_list[i]] * 1.0 / rtoken_total_sum))
 *         if ltoken_sum_vector[field_list[i]] > ltoken_total_sum * ratio or\             # <<<<<<<<<<<<<<
 *                 rtoken_sum_vector[field_list[i]] > rtoken_total_sum * ratio:
 *             removed_field_index = i
 */
    }
  }
  __pyx_L29_break:;

  /* "debugblock/debugblocker_cython.pyx":227
 *             break
 * 
 *     if removed_field_index < 0:             # <<<<<<<<<<<<<<
 *         removed_field_index = field_list.size() - 1
 *     # removed_field_index = field_list.size() - 1
 */
  __pyx_t_1 = ((__pyx_v_removed_field_index < 0) != 0);
  if (__pyx_t_1) {

    /* "debugblock/debugblocker_cython.pyx":228
 * 
 *     if removed_field_index < 0:
 *         removed_field_index = field_list.size() - 1             # <<<<<<<<<<<<<<
 *     # removed_field_index = field_list.size() - 1
 *     print 'required remove-field ratio:', ratio
 */
    __pyx_v_removed_field_index = (__pyx_v_field_list.size() - 1);

    /* "debugblock/debugblocker_cython.pyx":227
 *             break
 * 
 *     if removed_field_index < 0:             # <<<<<<<<<<<<<<
 *         removed_field_index = field_list.size() - 1
 *     # removed_field_index = field_list.size() - 1
 */
  }

  /* "debugblock/debugblocker_cython.pyx":230
 *         removed_field_index = field_list.size() - 1
 *     # removed_field_index = field_list.size() - 1
 *     print 'required remove-field ratio:', ratio             # <<<<<<<<<<<<<<
 *     print 'actual max ratio:', max_ratio
 * 
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_ratio); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_kp_s_required_remove_field_ratio);
  __Pyx_GIVEREF(__pyx_kp_s_required_remove_field_ratio);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s_required_remove_field_ratio);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  if (__Pyx_Print(0, __pyx_t_4, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "debugblock/debugblocker_cython.pyx":231
 *     # removed_field_index = field_list.size() - 1
 *     print 'required remove-field ratio:', ratio
 *     print 'actual max ratio:', max_ratio             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_max_ratio); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_actual_max_ratio);
  __Pyx_GIVEREF(__pyx_kp_s_actual_max_ratio);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_actual_max_ratio);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  if (__Pyx_Print(0, __pyx_t_3, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "debugblock/debugblocker_cython.pyx":242
 *     if True:
 *     # if not has_long_field:
 *         for i in range(field_list.size()):             # <<<<<<<<<<<<<<
 *             if i != removed_field_index:
 *                 temp = vector[int](field_list)
 */
  __pyx_t_5 = __pyx_v_field_list.size();
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "debugblock/debugblocker_cython.pyx":243
 *     # if not has_long_field:
 *         for i in range(field_list.size()):
 *             if i != removed_field_index:             # <<<<<<<<<<<<<<
 *                 temp = vector[int](field_list)
 *                 temp.erase(temp.begin() + i)
 */
    __pyx_t_1 = ((__pyx_v_i != __pyx_v_removed_field_index) != 0);
    if (__pyx_t_1) {

      /* "debugblock/debugblocker_cython.pyx":244
 *         for i in range(field_list.size()):
 *             if i != removed_field_index:
 *                 temp = vector[int](field_list)             # <<<<<<<<<<<<<<
 *                 temp.erase(temp.begin() + i)
 *                 if temp.size() > minimal_num_fields:
 */
      try {
        __pyx_t_16 = std::vector<int> (__pyx_v_field_list);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_temp = __pyx_t_16;

      /* "debugblock/debugblocker_cython.pyx":245
 *             if i != removed_field_index:
 *                 temp = vector[int](field_list)
 *                 temp.erase(temp.begin() + i)             # <<<<<<<<<<<<<<
 *                 if temp.size() > minimal_num_fields:
 *                     field_list_parallel.push_back(temp)
 */
      __pyx_v_temp.erase((__pyx_v_temp.begin() + __pyx_v_i));

      /* "debugblock/debugblocker_cython.pyx":246
 *                 temp = vector[int](field_list)
 *                 temp.erase(temp.begin() + i)
 *                 if temp.size() > minimal_num_fields:             # <<<<<<<<<<<<<<
 *                     field_list_parallel.push_back(temp)
 *                     field_parallel.push_back(field_list[i])
 */
      __pyx_t_1 = ((__pyx_v_temp.size() > __pyx_v_minimal_num_fields) != 0);
      if (__pyx_t_1) {

        /* "debugblock/debugblocker_cython.pyx":247
 *                 temp.erase(temp.begin() + i)
 *                 if temp.size() > minimal_num_fields:
 *                     field_list_parallel.push_back(temp)             # <<<<<<<<<<<<<<
 *                     field_parallel.push_back(field_list[i])
 *                     heap_vector_parallel.push_back(heap_vector[i])
 */
        try {
          __pyx_v_field_list_parallel.push_back(__pyx_v_temp);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "debugblock/debugblocker_cython.pyx":248
 *                 if temp.size() > minimal_num_fields:
 *                     field_list_parallel.push_back(temp)
 *                     field_parallel.push_back(field_list[i])             # <<<<<<<<<<<<<<
 *                     heap_vector_parallel.push_back(heap_vector[i])
 *                     ltoken_vector_parallel.push_back(vector[vector[int]]())
 */
        try {
          __pyx_v_field_parallel.push_back((__pyx_v_field_list[__pyx_v_i]));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "debugblock/debugblocker_cython.pyx":249
 *                     field_list_parallel.push_back(temp)
 *                     field_parallel.push_back(field_list[i])
 *                     heap_vector_parallel.push_back(heap_vector[i])             # <<<<<<<<<<<<<<
 *                     ltoken_vector_parallel.push_back(vector[vector[int]]())
 *                     copy_table_and_remove_field(ltoken_vector, lindex_vector,
 */
        try {
          __pyx_v_heap_vector_parallel.push_back((__pyx_v_heap_vector[__pyx_v_i]));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "debugblock/debugblocker_cython.pyx":250
 *                     field_parallel.push_back(field_list[i])
 *                     heap_vector_parallel.push_back(heap_vector[i])
 *                     ltoken_vector_parallel.push_back(vector[vector[int]]())             # <<<<<<<<<<<<<<
 *                     copy_table_and_remove_field(ltoken_vector, lindex_vector,
 *                                                 ltoken_vector_parallel[ltoken_vector_parallel.size() - 1],
 */
        try {
          __pyx_t_17 = std::vector<std::vector<int> > ();
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        try {
          __pyx_v_ltoken_vector_parallel.push_back(__pyx_t_17);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "debugblock/debugblocker_cython.pyx":251
 *                     heap_vector_parallel.push_back(heap_vector[i])
 *                     ltoken_vector_parallel.push_back(vector[vector[int]]())
 *                     copy_table_and_remove_field(ltoken_vector, lindex_vector,             # <<<<<<<<<<<<<<
 *                                                 ltoken_vector_parallel[ltoken_vector_parallel.size() - 1],
 *                                                 field_list[i])
 */
        __pyx_f_10debugblock_19debugblocker_cython_copy_table_and_remove_field(__pyx_v_ltoken_vector, __pyx_v_lindex_vector, (__pyx_v_ltoken_vector_parallel[(__pyx_v_ltoken_vector_parallel.size() - 1)]), (__pyx_v_field_list[__pyx_v_i]));

        /* "debugblock/debugblocker_cython.pyx":254
 *                                                 ltoken_vector_parallel[ltoken_vector_parallel.size() - 1],
 *                                                 field_list[i])
 *                     rtoken_vector_parallel.push_back(vector[vector[int]]())             # <<<<<<<<<<<<<<
 *                     copy_table_and_remove_field(rtoken_vector, rindex_vector,
 *                                                 rtoken_vector_parallel[rtoken_vector_parallel.size() - 1],
 */
        try {
          __pyx_t_17 = std::vector<std::vector<int> > ();
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        try {
          __pyx_v_rtoken_vector_parallel.push_back(__pyx_t_17);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "debugblock/debugblocker_cython.pyx":255
 *                                                 field_list[i])
 *                     rtoken_vector_parallel.push_back(vector[vector[int]]())
 *                     copy_table_and_remove_field(rtoken_vector, rindex_vector,             # <<<<<<<<<<<<<<
 *                                                 rtoken_vector_parallel[rtoken_vector_parallel.size() - 1],
 *                                                 field_list[i])
 */
        __pyx_f_10debugblock_19debugblocker_cython_copy_table_and_remove_field(__pyx_v_rtoken_vector, __pyx_v_rindex_vector, (__pyx_v_rtoken_vector_parallel[(__pyx_v_rtoken_vector_parallel.size() - 1)]), (__pyx_v_field_list[__pyx_v_i]));

        /* "debugblock/debugblocker_cython.pyx":246
 *                 temp = vector[int](field_list)
 *                 temp.erase(temp.begin() + i)
 *                 if temp.size() > minimal_num_fields:             # <<<<<<<<<<<<<<
 *                     field_list_parallel.push_back(temp)
 *                     field_parallel.push_back(field_list[i])
 */
      }

      /* "debugblock/debugblocker_cython.pyx":243
 *     # if not has_long_field:
 *         for i in range(field_list.size()):
 *             if i != removed_field_index:             # <<<<<<<<<<<<<<
 *                 temp = vector[int](field_list)
 *                 temp.erase(temp.begin() + i)
 */
    }
  }

  /* "debugblock/debugblocker_cython.pyx":259
 *                                                 field_list[i])
 * 
 *         if use_parallel:             # <<<<<<<<<<<<<<
 *             with nogil, parallel(num_threads=field_parallel.size()):
 *                 for p in prange(field_parallel.size()):
 */
  __pyx_t_1 = (__pyx_v_use_parallel != 0);
  if (__pyx_t_1) {

    /* "debugblock/debugblocker_cython.pyx":260
 * 
 *         if use_parallel:
 *             with nogil, parallel(num_threads=field_parallel.size()):             # <<<<<<<<<<<<<<
 *                 for p in prange(field_parallel.size()):
 *                     generator.generate_topklist_for_config(ltoken_vector_parallel[p], rtoken_vector_parallel[p],
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {
          {
              __pyx_t_5 = __pyx_v_field_parallel.size();
              #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                  #undef likely
                  #undef unlikely
                  #define likely(x)   (x)
                  #define unlikely(x) (x)
              #endif
              #ifdef _OPENMP
              #pragma omp parallel  private(__pyx_t_20, __pyx_t_19, __pyx_t_18) num_threads(__pyx_t_5)
              #endif /* _OPENMP */
              {

                  /* "debugblock/debugblocker_cython.pyx":261
 *         if use_parallel:
 *             with nogil, parallel(num_threads=field_parallel.size()):
 *                 for p in prange(field_parallel.size()):             # <<<<<<<<<<<<<<
 *                     generator.generate_topklist_for_config(ltoken_vector_parallel[p], rtoken_vector_parallel[p],
 *                                                            lindex_vector, rindex_vector, lfield_vector, rfield_vector,
 */
                  __pyx_t_18 = __pyx_v_field_parallel.size();
                  if (1 == 0) abort();
                  {
                      __pyx_t_20 = (__pyx_t_18 - 0) / 1;
                      if (__pyx_t_20 > 0)
                      {
                          #ifdef _OPENMP
                          #pragma omp for firstprivate(__pyx_v_p) lastprivate(__pyx_v_p)
                          #endif /* _OPENMP */
                          for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_20; __pyx_t_19++){
                              {
                                  __pyx_v_p = 0 + 1 * __pyx_t_19;

                                  /* "debugblock/debugblocker_cython.pyx":262
 *             with nogil, parallel(num_threads=field_parallel.size()):
 *                 for p in prange(field_parallel.size()):
 *                     generator.generate_topklist_for_config(ltoken_vector_parallel[p], rtoken_vector_parallel[p],             # <<<<<<<<<<<<<<
 *                                                            lindex_vector, rindex_vector, lfield_vector, rfield_vector,
 *                                                            ltoken_sum_vector, rtoken_sum_vector,
 */
                                  __pyx_v_generator.generate_topklist_for_config((__pyx_v_ltoken_vector_parallel[__pyx_v_p]), (__pyx_v_rtoken_vector_parallel[__pyx_v_p]), __pyx_v_lindex_vector, __pyx_v_rindex_vector, __pyx_v_lfield_vector, __pyx_v_rfield_vector, __pyx_v_ltoken_sum_vector, __pyx_v_rtoken_sum_vector, (__pyx_v_field_list_parallel[__pyx_v_p]), __pyx_v_max_field_num, (__pyx_v_field_list[__pyx_v_p]), 0, __pyx_v_temp_signal, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_heap_vector, (__pyx_v_heap_vector_parallel[__pyx_v_p]), __pyx_v_prefix_match_max_size, __pyx_v_rec_ave_len_thres, __pyx_v_output_size, __pyx_v_activate_reusing_module, 1, __pyx_v_output_path);
                              }
                          }
                      }
                  }
              }
          }
          #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
              #undef likely
              #undef unlikely
              #define likely(x)   __builtin_expect(!!(x), 1)
              #define unlikely(x) __builtin_expect(!!(x), 0)
          #endif
        }

        /* "debugblock/debugblocker_cython.pyx":260
 * 
 *         if use_parallel:
 *             with nogil, parallel(num_threads=field_parallel.size()):             # <<<<<<<<<<<<<<
 *                 for p in prange(field_parallel.size()):
 *                     generator.generate_topklist_for_config(ltoken_vector_parallel[p], rtoken_vector_parallel[p],
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L41;
          }
          __pyx_L41:;
        }
    }

    /* "debugblock/debugblocker_cython.pyx":259
 *                                                 field_list[i])
 * 
 *         if use_parallel:             # <<<<<<<<<<<<<<
 *             with nogil, parallel(num_threads=field_parallel.size()):
 *                 for p in prange(field_parallel.size()):
 */
    goto __pyx_L38;
  }

  /* "debugblock/debugblocker_cython.pyx":269
 *                                                            output_size, activate_reusing_module, 1, output_path)
 *         else:
 *             for p in range(field_parallel.size()):             # <<<<<<<<<<<<<<
 *                 generator.generate_topklist_for_config(ltoken_vector_parallel[p], rtoken_vector_parallel[p],
 *                                                        lindex_vector, rindex_vector, lfield_vector, rfield_vector,
 */
  /*else*/ {
    __pyx_t_20 = __pyx_v_field_parallel.size();
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_20; __pyx_t_12+=1) {
      __pyx_v_p = __pyx_t_12;

      /* "debugblock/debugblocker_cython.pyx":270
 *         else:
 *             for p in range(field_parallel.size()):
 *                 generator.generate_topklist_for_config(ltoken_vector_parallel[p], rtoken_vector_parallel[p],             # <<<<<<<<<<<<<<
 *                                                        lindex_vector, rindex_vector, lfield_vector, rfield_vector,
 *                                                        ltoken_sum_vector, rtoken_sum_vector,
 */
      __pyx_v_generator.generate_topklist_for_config((__pyx_v_ltoken_vector_parallel[__pyx_v_p]), (__pyx_v_rtoken_vector_parallel[__pyx_v_p]), __pyx_v_lindex_vector, __pyx_v_rindex_vector, __pyx_v_lfield_vector, __pyx_v_rfield_vector, __pyx_v_ltoken_sum_vector, __pyx_v_rtoken_sum_vector, (__pyx_v_field_list_parallel[__pyx_v_p]), __pyx_v_max_field_num, (__pyx_v_field_list[__pyx_v_p]), 0, __pyx_v_temp_signal, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_heap_vector, (__pyx_v_heap_vector_parallel[__pyx_v_p]), __pyx_v_prefix_match_max_size, __pyx_v_rec_ave_len_thres, __pyx_v_output_size, __pyx_v_activate_reusing_module, 1, __pyx_v_output_path);
    }
  }
  __pyx_L38:;

  /* "debugblock/debugblocker_cython.pyx":285
 *         #                                    offset_of_field_num, output_size, use_plain, 1, output_path)
 * 
 *     print 'remove', field_list[removed_field_index]             # <<<<<<<<<<<<<<
 *     remove_field(ltoken_vector, lindex_vector, field_list[removed_field_index])
 *     remove_field(rtoken_vector, rindex_vector, field_list[removed_field_index])
 */
  __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_field_list[__pyx_v_removed_field_index])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_remove);
  __Pyx_GIVEREF(__pyx_n_s_remove);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_remove);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  if (__Pyx_Print(0, __pyx_t_4, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "debugblock/debugblocker_cython.pyx":286
 * 
 *     print 'remove', field_list[removed_field_index]
 *     remove_field(ltoken_vector, lindex_vector, field_list[removed_field_index])             # <<<<<<<<<<<<<<
 *     remove_field(rtoken_vector, rindex_vector, field_list[removed_field_index])
 *     field_list.erase(field_list.begin() + removed_field_index)
 */
  __pyx_f_10debugblock_19debugblocker_cython_remove_field(__pyx_v_ltoken_vector, __pyx_v_lindex_vector, (__pyx_v_field_list[__pyx_v_removed_field_index]));

  /* "debugblock/debugblocker_cython.pyx":287
 *     print 'remove', field_list[removed_field_index]
 *     remove_field(ltoken_vector, lindex_vector, field_list[removed_field_index])
 *     remove_field(rtoken_vector, rindex_vector, field_list[removed_field_index])             # <<<<<<<<<<<<<<
 *     field_list.erase(field_list.begin() + removed_field_index)
 * 
 */
  __pyx_f_10debugblock_19debugblocker_cython_remove_field(__pyx_v_rtoken_vector, __pyx_v_rindex_vector, (__pyx_v_field_list[__pyx_v_removed_field_index]));

  /* "debugblock/debugblocker_cython.pyx":288
 *     remove_field(ltoken_vector, lindex_vector, field_list[removed_field_index])
 *     remove_field(rtoken_vector, rindex_vector, field_list[removed_field_index])
 *     field_list.erase(field_list.begin() + removed_field_index)             # <<<<<<<<<<<<<<
 * 
 *     generate_recom_lists(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector, lfield_vector, rfield_vector,
 */
  __pyx_v_field_list.erase((__pyx_v_field_list.begin() + __pyx_v_removed_field_index));

  /* "debugblock/debugblocker_cython.pyx":290
 *     field_list.erase(field_list.begin() + removed_field_index)
 * 
 *     generate_recom_lists(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector, lfield_vector, rfield_vector,             # <<<<<<<<<<<<<<
 *                          ltoken_sum_vector, rtoken_sum_vector, field_list, topk_lists, False, cand_set, reuse_set,
 *                          prefix_match_max_size, rec_ave_len_thres, offset_of_field_num, max_field_num,
 */
  __pyx_f_10debugblock_19debugblocker_cython_generate_recom_lists(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_lindex_vector, __pyx_v_rindex_vector, __pyx_v_lfield_vector, __pyx_v_rfield_vector, __pyx_v_ltoken_sum_vector, __pyx_v_rtoken_sum_vector, __pyx_v_field_list, __pyx_v_topk_lists, 0, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_prefix_match_max_size, __pyx_v_rec_ave_len_thres, __pyx_v_offset_of_field_num, __pyx_v_max_field_num, __pyx_v_minimal_num_fields, __pyx_v_field_remove_ratio, __pyx_v_output_size, __pyx_v_output_path, (__pyx_v_heap_vector[__pyx_v_removed_field_index]), __pyx_v_activate_reusing_module, __pyx_v_use_new_topk, __pyx_v_use_parallel);

  /* "debugblock/debugblocker_cython.pyx":296
 *                          heap_vector[removed_field_index], activate_reusing_module, use_new_topk, use_parallel)
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "debugblock/debugblocker_cython.pyx":133
 * 
 * 
 * cdef void generate_recom_lists(vector[vector[int]]& ltoken_vector, vector[vector[int]]& rtoken_vector,             # <<<<<<<<<<<<<<
 *                                vector[vector[int]]& lindex_vector, vector[vector[int]]& rindex_vector,
 *                                vector[vector[int]]& lfield_vector, vector[vector[int]]& rfield_vector,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.generate_recom_lists", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_start);
  __Pyx_XDECREF(__pyx_v_end);
  __Pyx_RefNannyFinishContext();
}

/* "debugblock/debugblocker_cython.pyx":299
 * 
 * 
 * cdef vector[heap[TopPair]]create_heap_vector(const int size):             # <<<<<<<<<<<<<<
 *     cdef vector[heap[TopPair]] heap_vector
 *     for i in xrange(size):
 */

static std::vector<std::priority_queue<TopPair> >  __pyx_f_10debugblock_19debugblocker_cython_create_heap_vector(int const __pyx_v_size) {
  std::vector<std::priority_queue<TopPair> >  __pyx_v_heap_vector;
  CYTHON_UNUSED int __pyx_v_i;
  std::vector<std::priority_queue<TopPair> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::priority_queue<TopPair>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_heap_vector", 0);

  /* "debugblock/debugblocker_cython.pyx":301
 * cdef vector[heap[TopPair]]create_heap_vector(const int size):
 *     cdef vector[heap[TopPair]] heap_vector
 *     for i in xrange(size):             # <<<<<<<<<<<<<<
 *         heap_vector.push_back(heap[TopPair]())
 * 
 */
  __pyx_t_1 = __pyx_v_size;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/debugblocker_cython.pyx":302
 *     cdef vector[heap[TopPair]] heap_vector
 *     for i in xrange(size):
 *         heap_vector.push_back(heap[TopPair]())             # <<<<<<<<<<<<<<
 * 
 *     return heap_vector
 */
    try {
      __pyx_t_3 = std::priority_queue<TopPair> ();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_heap_vector.push_back(__pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "debugblock/debugblocker_cython.pyx":304
 *         heap_vector.push_back(heap[TopPair]())
 * 
 *     return heap_vector             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_heap_vector;
  goto __pyx_L0;

  /* "debugblock/debugblocker_cython.pyx":299
 * 
 * 
 * cdef vector[heap[TopPair]]create_heap_vector(const int size):             # <<<<<<<<<<<<<<
 *     cdef vector[heap[TopPair]] heap_vector
 *     for i in xrange(size):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.create_heap_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "debugblock/debugblocker_cython.pyx":398
 * 
 * 
 * cdef void save_topk_list_to_file(const vector[int]& field_list, const string& output_path,             # <<<<<<<<<<<<<<
 *                                  heap[TopPair] topk_heap) nogil:
 *     cdef string path = output_path + <char *>'topk_'
 */

static void __pyx_f_10debugblock_19debugblocker_cython_save_topk_list_to_file(std::vector<int>  const &__pyx_v_field_list, std::string const &__pyx_v_output_path, std::priority_queue<TopPair>  __pyx_v_topk_heap) {
  std::string __pyx_v_path;
  char __pyx_v_buf[10];
  int __pyx_v_i;
  TopPair __pyx_v_pair;
  FILE *__pyx_v_fp;
  size_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "debugblock/debugblocker_cython.pyx":400
 * cdef void save_topk_list_to_file(const vector[int]& field_list, const string& output_path,
 *                                  heap[TopPair] topk_heap) nogil:
 *     cdef string path = output_path + <char *>'topk_'             # <<<<<<<<<<<<<<
 *     cdef char buf[10]
 *     cdef int i
 */
  __pyx_v_path = (__pyx_v_output_path + ((char *)__pyx_k_topk));

  /* "debugblock/debugblocker_cython.pyx":403
 *     cdef char buf[10]
 *     cdef int i
 *     for i in xrange(field_list.size()):             # <<<<<<<<<<<<<<
 *         sprintf(buf, "%d", field_list[i])
 *         if i != 0:
 */
  __pyx_t_1 = __pyx_v_field_list.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/debugblocker_cython.pyx":404
 *     cdef int i
 *     for i in xrange(field_list.size()):
 *         sprintf(buf, "%d", field_list[i])             # <<<<<<<<<<<<<<
 *         if i != 0:
 *             path.append(<char *>'_')
 */
    sprintf(__pyx_v_buf, __pyx_k_d, (__pyx_v_field_list[__pyx_v_i]));

    /* "debugblock/debugblocker_cython.pyx":405
 *     for i in xrange(field_list.size()):
 *         sprintf(buf, "%d", field_list[i])
 *         if i != 0:             # <<<<<<<<<<<<<<
 *             path.append(<char *>'_')
 *         path.append(buf)
 */
    __pyx_t_3 = ((__pyx_v_i != 0) != 0);
    if (__pyx_t_3) {

      /* "debugblock/debugblocker_cython.pyx":406
 *         sprintf(buf, "%d", field_list[i])
 *         if i != 0:
 *             path.append(<char *>'_')             # <<<<<<<<<<<<<<
 *         path.append(buf)
 *     path += <char *>'.txt'
 */
      __pyx_v_path.append(((char *)__pyx_k_));

      /* "debugblock/debugblocker_cython.pyx":405
 *     for i in xrange(field_list.size()):
 *         sprintf(buf, "%d", field_list[i])
 *         if i != 0:             # <<<<<<<<<<<<<<
 *             path.append(<char *>'_')
 *         path.append(buf)
 */
    }

    /* "debugblock/debugblocker_cython.pyx":407
 *         if i != 0:
 *             path.append(<char *>'_')
 *         path.append(buf)             # <<<<<<<<<<<<<<
 *     path += <char *>'.txt'
 *     printf("%s\n", path.c_str())
 */
    __pyx_v_path.append(__pyx_v_buf);
  }

  /* "debugblock/debugblocker_cython.pyx":408
 *             path.append(<char *>'_')
 *         path.append(buf)
 *     path += <char *>'.txt'             # <<<<<<<<<<<<<<
 *     printf("%s\n", path.c_str())
 * 
 */
  __pyx_v_path += ((char *)__pyx_k_txt);

  /* "debugblock/debugblocker_cython.pyx":409
 *         path.append(buf)
 *     path += <char *>'.txt'
 *     printf("%s\n", path.c_str())             # <<<<<<<<<<<<<<
 * 
 *     cdef TopPair pair
 */
  printf(__pyx_k_s, __pyx_v_path.c_str());

  /* "debugblock/debugblocker_cython.pyx":412
 * 
 *     cdef TopPair pair
 *     cdef FILE* fp = fopen(path.c_str(), "w+")             # <<<<<<<<<<<<<<
 *     while topk_heap.size() > 0:
 *         pair = topk_heap.top()
 */
  __pyx_v_fp = fopen(__pyx_v_path.c_str(), __pyx_k_w);

  /* "debugblock/debugblocker_cython.pyx":413
 *     cdef TopPair pair
 *     cdef FILE* fp = fopen(path.c_str(), "w+")
 *     while topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *         pair = topk_heap.top()
 *         topk_heap.pop()
 */
  while (1) {
    __pyx_t_3 = ((__pyx_v_topk_heap.size() > 0) != 0);
    if (!__pyx_t_3) break;

    /* "debugblock/debugblocker_cython.pyx":414
 *     cdef FILE* fp = fopen(path.c_str(), "w+")
 *     while topk_heap.size() > 0:
 *         pair = topk_heap.top()             # <<<<<<<<<<<<<<
 *         topk_heap.pop()
 *         fprintf(fp, "%.16f %d %d\n", pair.sim, pair.l_rec, pair.r_rec)
 */
    __pyx_v_pair = __pyx_v_topk_heap.top();

    /* "debugblock/debugblocker_cython.pyx":415
 *     while topk_heap.size() > 0:
 *         pair = topk_heap.top()
 *         topk_heap.pop()             # <<<<<<<<<<<<<<
 *         fprintf(fp, "%.16f %d %d\n", pair.sim, pair.l_rec, pair.r_rec)
 *     fclose(fp)
 */
    __pyx_v_topk_heap.pop();

    /* "debugblock/debugblocker_cython.pyx":416
 *         pair = topk_heap.top()
 *         topk_heap.pop()
 *         fprintf(fp, "%.16f %d %d\n", pair.sim, pair.l_rec, pair.r_rec)             # <<<<<<<<<<<<<<
 *     fclose(fp)
 * 
 */
    fprintf(__pyx_v_fp, __pyx_k_16f_d_d, __pyx_v_pair.sim, __pyx_v_pair.l_rec, __pyx_v_pair.r_rec);
  }

  /* "debugblock/debugblocker_cython.pyx":417
 *         topk_heap.pop()
 *         fprintf(fp, "%.16f %d %d\n", pair.sim, pair.l_rec, pair.r_rec)
 *     fclose(fp)             # <<<<<<<<<<<<<<
 * 
 *     return
 */
  fclose(__pyx_v_fp);

  /* "debugblock/debugblocker_cython.pyx":419
 *     fclose(fp)
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "debugblock/debugblocker_cython.pyx":398
 * 
 * 
 * cdef void save_topk_list_to_file(const vector[int]& field_list, const string& output_path,             # <<<<<<<<<<<<<<
 *                                  heap[TopPair] topk_heap) nogil:
 *     cdef string path = output_path + <char *>'topk_'
 */

  /* function exit code */
  __pyx_L0:;
}

/* "debugblock/debugblocker_cython.pyx":422
 * 
 * 
 * cdef void copy_table_and_remove_field(const vector[vector[int]]& table_vector,             # <<<<<<<<<<<<<<
 *                                       const vector[vector[int]]& index_vector,
 *                                       vector[vector[int]]& new_table_vector, int rm_field):
 */

static void __pyx_f_10debugblock_19debugblocker_cython_copy_table_and_remove_field(std::vector<std::vector<int> >  const &__pyx_v_table_vector, std::vector<std::vector<int> >  const &__pyx_v_index_vector, std::vector<std::vector<int> >  &__pyx_v_new_table_vector, int __pyx_v_rm_field) {
  uint32_t __pyx_v_i;
  uint32_t __pyx_v_j;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  uint32_t __pyx_t_2;
  std::vector<int>  __pyx_t_3;
  size_t __pyx_t_4;
  uint32_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_table_and_remove_field", 0);

  /* "debugblock/debugblocker_cython.pyx":426
 *                                       vector[vector[int]]& new_table_vector, int rm_field):
 *     cdef uint i, j
 *     for i in xrange(table_vector.size()):             # <<<<<<<<<<<<<<
 *         new_table_vector.push_back(vector[int]())
 *         for j in xrange(table_vector[i].size()):
 */
  __pyx_t_1 = __pyx_v_table_vector.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/debugblocker_cython.pyx":427
 *     cdef uint i, j
 *     for i in xrange(table_vector.size()):
 *         new_table_vector.push_back(vector[int]())             # <<<<<<<<<<<<<<
 *         for j in xrange(table_vector[i].size()):
 *             if index_vector[i][j] != rm_field:
 */
    try {
      __pyx_t_3 = std::vector<int> ();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_new_table_vector.push_back(__pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "debugblock/debugblocker_cython.pyx":428
 *     for i in xrange(table_vector.size()):
 *         new_table_vector.push_back(vector[int]())
 *         for j in xrange(table_vector[i].size()):             # <<<<<<<<<<<<<<
 *             if index_vector[i][j] != rm_field:
 *                 new_table_vector[i].push_back(table_vector[i][j])
 */
    __pyx_t_4 = (__pyx_v_table_vector[__pyx_v_i]).size();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_j = __pyx_t_5;

      /* "debugblock/debugblocker_cython.pyx":429
 *         new_table_vector.push_back(vector[int]())
 *         for j in xrange(table_vector[i].size()):
 *             if index_vector[i][j] != rm_field:             # <<<<<<<<<<<<<<
 *                 new_table_vector[i].push_back(table_vector[i][j])
 * 
 */
      __pyx_t_6 = ((((__pyx_v_index_vector[__pyx_v_i])[__pyx_v_j]) != __pyx_v_rm_field) != 0);
      if (__pyx_t_6) {

        /* "debugblock/debugblocker_cython.pyx":430
 *         for j in xrange(table_vector[i].size()):
 *             if index_vector[i][j] != rm_field:
 *                 new_table_vector[i].push_back(table_vector[i][j])             # <<<<<<<<<<<<<<
 * 
 * 
 */
        try {
          (__pyx_v_new_table_vector[__pyx_v_i]).push_back(((__pyx_v_table_vector[__pyx_v_i])[__pyx_v_j]));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "debugblock/debugblocker_cython.pyx":429
 *         new_table_vector.push_back(vector[int]())
 *         for j in xrange(table_vector[i].size()):
 *             if index_vector[i][j] != rm_field:             # <<<<<<<<<<<<<<
 *                 new_table_vector[i].push_back(table_vector[i][j])
 * 
 */
      }
    }
  }

  /* "debugblock/debugblocker_cython.pyx":422
 * 
 * 
 * cdef void copy_table_and_remove_field(const vector[vector[int]]& table_vector,             # <<<<<<<<<<<<<<
 *                                       const vector[vector[int]]& index_vector,
 *                                       vector[vector[int]]& new_table_vector, int rm_field):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.copy_table_and_remove_field", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "debugblock/debugblocker_cython.pyx":433
 * 
 * 
 * cdef void remove_field(vector[vector[int]]& table_vector,             # <<<<<<<<<<<<<<
 *                        vector[vector[int]]& index_vector, int rm_field):
 *     cdef uint i, j
 */

static void __pyx_f_10debugblock_19debugblocker_cython_remove_field(std::vector<std::vector<int> >  &__pyx_v_table_vector, std::vector<std::vector<int> >  &__pyx_v_index_vector, int __pyx_v_rm_field) {
  uint32_t __pyx_v_i;
  uint32_t __pyx_v_j;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  uint32_t __pyx_t_2;
  uint32_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("remove_field", 0);

  /* "debugblock/debugblocker_cython.pyx":436
 *                        vector[vector[int]]& index_vector, int rm_field):
 *     cdef uint i, j
 *     for i in xrange(table_vector.size()):             # <<<<<<<<<<<<<<
 *         for j in reversed(range(table_vector[i].size())):
 *             if index_vector[i][j] == rm_field:
 */
  __pyx_t_1 = __pyx_v_table_vector.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/debugblocker_cython.pyx":437
 *     cdef uint i, j
 *     for i in xrange(table_vector.size()):
 *         for j in reversed(range(table_vector[i].size())):             # <<<<<<<<<<<<<<
 *             if index_vector[i][j] == rm_field:
 *                 index_vector[i].erase(index_vector[i].begin() + j)
 */
    for (__pyx_t_3 = (__pyx_v_table_vector[__pyx_v_i]).size()-1 + 1; __pyx_t_3 >= 0 + 1; ) { __pyx_t_3-=1;
      __pyx_v_j = __pyx_t_3;

      /* "debugblock/debugblocker_cython.pyx":438
 *     for i in xrange(table_vector.size()):
 *         for j in reversed(range(table_vector[i].size())):
 *             if index_vector[i][j] == rm_field:             # <<<<<<<<<<<<<<
 *                 index_vector[i].erase(index_vector[i].begin() + j)
 *                 table_vector[i].erase(table_vector[i].begin() + j)
 */
      __pyx_t_4 = ((((__pyx_v_index_vector[__pyx_v_i])[__pyx_v_j]) == __pyx_v_rm_field) != 0);
      if (__pyx_t_4) {

        /* "debugblock/debugblocker_cython.pyx":439
 *         for j in reversed(range(table_vector[i].size())):
 *             if index_vector[i][j] == rm_field:
 *                 index_vector[i].erase(index_vector[i].begin() + j)             # <<<<<<<<<<<<<<
 *                 table_vector[i].erase(table_vector[i].begin() + j)
 * 
 */
        (__pyx_v_index_vector[__pyx_v_i]).erase(((__pyx_v_index_vector[__pyx_v_i]).begin() + __pyx_v_j));

        /* "debugblock/debugblocker_cython.pyx":440
 *             if index_vector[i][j] == rm_field:
 *                 index_vector[i].erase(index_vector[i].begin() + j)
 *                 table_vector[i].erase(table_vector[i].begin() + j)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        (__pyx_v_table_vector[__pyx_v_i]).erase(((__pyx_v_table_vector[__pyx_v_i]).begin() + __pyx_v_j));

        /* "debugblock/debugblocker_cython.pyx":438
 *     for i in xrange(table_vector.size()):
 *         for j in reversed(range(table_vector[i].size())):
 *             if index_vector[i][j] == rm_field:             # <<<<<<<<<<<<<<
 *                 index_vector[i].erase(index_vector[i].begin() + j)
 *                 table_vector[i].erase(table_vector[i].begin() + j)
 */
      }
    }
  }

  /* "debugblock/debugblocker_cython.pyx":433
 * 
 * 
 * cdef void remove_field(vector[vector[int]]& table_vector,             # <<<<<<<<<<<<<<
 *                        vector[vector[int]]& index_vector, int rm_field):
 *     cdef uint i, j
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "debugblock/debugblocker_cython.pyx":443
 * 
 * 
 * cdef void convert_table_to_vector(table_list, vector[vector[int]]& table_vector):             # <<<<<<<<<<<<<<
 *     cdef int i, j
 *     for i in range(len(table_list)):
 */

static void __pyx_f_10debugblock_19debugblocker_cython_convert_table_to_vector(PyObject *__pyx_v_table_list, std::vector<std::vector<int> >  &__pyx_v_table_vector) {
  int __pyx_v_i;
  int __pyx_v_j;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  std::vector<int>  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_table_to_vector", 0);

  /* "debugblock/debugblocker_cython.pyx":445
 * cdef void convert_table_to_vector(table_list, vector[vector[int]]& table_vector):
 *     cdef int i, j
 *     for i in range(len(table_list)):             # <<<<<<<<<<<<<<
 *         table_vector.push_back(vector[int]())
 *         for j in range(len(table_list[i])):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_table_list); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/debugblocker_cython.pyx":446
 *     cdef int i, j
 *     for i in range(len(table_list)):
 *         table_vector.push_back(vector[int]())             # <<<<<<<<<<<<<<
 *         for j in range(len(table_list[i])):
 *             table_vector[i].push_back(table_list[i][j])
 */
    try {
      __pyx_t_3 = std::vector<int> ();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_table_vector.push_back(__pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "debugblock/debugblocker_cython.pyx":447
 *     for i in range(len(table_list)):
 *         table_vector.push_back(vector[int]())
 *         for j in range(len(table_list[i])):             # <<<<<<<<<<<<<<
 *             table_vector[i].push_back(table_list[i][j])
 * 
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_table_list, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "debugblock/debugblocker_cython.pyx":448
 *         table_vector.push_back(vector[int]())
 *         for j in range(len(table_list[i])):
 *             table_vector[i].push_back(table_list[i][j])             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_table_list, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      try {
        (__pyx_v_table_vector[__pyx_v_i]).push_back(__pyx_t_8);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
  }

  /* "debugblock/debugblocker_cython.pyx":443
 * 
 * 
 * cdef void convert_table_to_vector(table_list, vector[vector[int]]& table_vector):             # <<<<<<<<<<<<<<
 *     cdef int i, j
 *     for i in range(len(table_list)):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.convert_table_to_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "debugblock/debugblocker_cython.pyx":451
 * 
 * 
 * cdef void convert_candidate_set_to_c_map(cand_set, cmap[int, cset[int]]& new_set):             # <<<<<<<<<<<<<<
 *     cdef int key, value
 *     for key in cand_set:
 */

static void __pyx_f_10debugblock_19debugblocker_cython_convert_candidate_set_to_c_map(PyObject *__pyx_v_cand_set, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_new_set) {
  int __pyx_v_key;
  int __pyx_v_value;
  PyObject *__pyx_v_l = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  std::unordered_set<int>  __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_candidate_set_to_c_map", 0);

  /* "debugblock/debugblocker_cython.pyx":453
 * cdef void convert_candidate_set_to_c_map(cand_set, cmap[int, cset[int]]& new_set):
 *     cdef int key, value
 *     for key in cand_set:             # <<<<<<<<<<<<<<
 *         if not new_set.count(key):
 *             new_set[key] = cset[int]()
 */
  if (likely(PyList_CheckExact(__pyx_v_cand_set)) || PyTuple_CheckExact(__pyx_v_cand_set)) {
    __pyx_t_1 = __pyx_v_cand_set; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_cand_set); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_key = __pyx_t_5;

    /* "debugblock/debugblocker_cython.pyx":454
 *     cdef int key, value
 *     for key in cand_set:
 *         if not new_set.count(key):             # <<<<<<<<<<<<<<
 *             new_set[key] = cset[int]()
 * 
 */
    __pyx_t_6 = ((!(__pyx_v_new_set.count(__pyx_v_key) != 0)) != 0);
    if (__pyx_t_6) {

      /* "debugblock/debugblocker_cython.pyx":455
 *     for key in cand_set:
 *         if not new_set.count(key):
 *             new_set[key] = cset[int]()             # <<<<<<<<<<<<<<
 * 
 *         l = cand_set[key]
 */
      try {
        __pyx_t_7 = std::unordered_set<int> ();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      (__pyx_v_new_set[__pyx_v_key]) = __pyx_t_7;

      /* "debugblock/debugblocker_cython.pyx":454
 *     cdef int key, value
 *     for key in cand_set:
 *         if not new_set.count(key):             # <<<<<<<<<<<<<<
 *             new_set[key] = cset[int]()
 * 
 */
    }

    /* "debugblock/debugblocker_cython.pyx":457
 *             new_set[key] = cset[int]()
 * 
 *         l = cand_set[key]             # <<<<<<<<<<<<<<
 *         for value in l:
 *             new_set[key].insert(value)
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_cand_set, __pyx_v_key, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_l, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "debugblock/debugblocker_cython.pyx":458
 * 
 *         l = cand_set[key]
 *         for value in l:             # <<<<<<<<<<<<<<
 *             new_set[key].insert(value)
 * 
 */
    if (likely(PyList_CheckExact(__pyx_v_l)) || PyTuple_CheckExact(__pyx_v_l)) {
      __pyx_t_4 = __pyx_v_l; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_l); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        }
      } else {
        __pyx_t_10 = __pyx_t_9(__pyx_t_4);
        if (unlikely(!__pyx_t_10)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_10);
      }
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_v_value = __pyx_t_5;

      /* "debugblock/debugblocker_cython.pyx":459
 *         l = cand_set[key]
 *         for value in l:
 *             new_set[key].insert(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      (__pyx_v_new_set[__pyx_v_key]).insert(__pyx_v_value);

      /* "debugblock/debugblocker_cython.pyx":458
 * 
 *         l = cand_set[key]
 *         for value in l:             # <<<<<<<<<<<<<<
 *             new_set[key].insert(value)
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "debugblock/debugblocker_cython.pyx":453
 * cdef void convert_candidate_set_to_c_map(cand_set, cmap[int, cset[int]]& new_set):
 *     cdef int key, value
 *     for key in cand_set:             # <<<<<<<<<<<<<<
 *         if not new_set.count(key):
 *             new_set[key] = cset[int]()
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "debugblock/debugblocker_cython.pyx":451
 * 
 * 
 * cdef void convert_candidate_set_to_c_map(cand_set, cmap[int, cset[int]]& new_set):             # <<<<<<<<<<<<<<
 *     cdef int key, value
 *     for key in cand_set:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.convert_candidate_set_to_c_map", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_RefNannyFinishContext();
}

/* "debugblock/debugblocker_cython.pyx":462
 * 
 * 
 * cdef int convert_py_list_to_vector(py_list, vector[int]& vector):             # <<<<<<<<<<<<<<
 *     for value in py_list:
 *         vector.push_back(value)
 */

static int __pyx_f_10debugblock_19debugblocker_cython_convert_py_list_to_vector(PyObject *__pyx_v_py_list, std::vector<int>  &__pyx_v_vector) {
  PyObject *__pyx_v_value = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_py_list_to_vector", 0);

  /* "debugblock/debugblocker_cython.pyx":463
 * 
 * cdef int convert_py_list_to_vector(py_list, vector[int]& vector):
 *     for value in py_list:             # <<<<<<<<<<<<<<
 *         vector.push_back(value)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_py_list)) || PyTuple_CheckExact(__pyx_v_py_list)) {
    __pyx_t_1 = __pyx_v_py_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_py_list); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "debugblock/debugblocker_cython.pyx":464
 * cdef int convert_py_list_to_vector(py_list, vector[int]& vector):
 *     for value in py_list:
 *         vector.push_back(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    try {
      __pyx_v_vector.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "debugblock/debugblocker_cython.pyx":463
 * 
 * cdef int convert_py_list_to_vector(py_list, vector[int]& vector):
 *     for value in py_list:             # <<<<<<<<<<<<<<
 *         vector.push_back(value)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "debugblock/debugblocker_cython.pyx":462
 * 
 * 
 * cdef int convert_py_list_to_vector(py_list, vector[int]& vector):             # <<<<<<<<<<<<<<
 *     for value in py_list:
 *         vector.push_back(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.convert_py_list_to_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "debugblock/debugblocker_cython.pyx":467
 * 
 * 
 * cdef double double_max(const double a, double b):             # <<<<<<<<<<<<<<
 *     if a > b:
 *         return a
 */

static double __pyx_f_10debugblock_19debugblocker_cython_double_max(double const __pyx_v_a, double __pyx_v_b) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("double_max", 0);

  /* "debugblock/debugblocker_cython.pyx":468
 * 
 * cdef double double_max(const double a, double b):
 *     if a > b:             # <<<<<<<<<<<<<<
 *         return a
 *     return b
 */
  __pyx_t_1 = ((__pyx_v_a > __pyx_v_b) != 0);
  if (__pyx_t_1) {

    /* "debugblock/debugblocker_cython.pyx":469
 * cdef double double_max(const double a, double b):
 *     if a > b:
 *         return a             # <<<<<<<<<<<<<<
 *     return b
 * 
 */
    __pyx_r = __pyx_v_a;
    goto __pyx_L0;

    /* "debugblock/debugblocker_cython.pyx":468
 * 
 * cdef double double_max(const double a, double b):
 *     if a > b:             # <<<<<<<<<<<<<<
 *         return a
 *     return b
 */
  }

  /* "debugblock/debugblocker_cython.pyx":470
 *     if a > b:
 *         return a
 *     return b             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_b;
  goto __pyx_L0;

  /* "debugblock/debugblocker_cython.pyx":467
 * 
 * 
 * cdef double double_max(const double a, double b):             # <<<<<<<<<<<<<<
 *     if a > b:
 *         return a
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "debugblock/debugblocker_cython.pyx":473
 * 
 * 
 * cdef void init_topk_heap_cython(const vector[vector[int]]& ltoken_vector, const vector[vector[int]]& rtoken_vector,             # <<<<<<<<<<<<<<
 *                                 heap[TopPair]& old_heap, vector[TopPair]& new_heap) nogil:
 *     cdef int a
 */

static void __pyx_f_10debugblock_19debugblocker_cython_init_topk_heap_cython(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::priority_queue<TopPair>  &__pyx_v_old_heap, std::vector<TopPair>  &__pyx_v_new_heap) {
  CYTHON_UNUSED int __pyx_v_overlap;
  double __pyx_v_new_sim;
  TopPair __pyx_v_pair;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "debugblock/debugblocker_cython.pyx":476
 *                                 heap[TopPair]& old_heap, vector[TopPair]& new_heap) nogil:
 *     cdef int a
 *     cdef int overlap = 0             # <<<<<<<<<<<<<<
 *     cdef uint i
 *     cdef double new_sim
 */
  __pyx_v_overlap = 0;

  /* "debugblock/debugblocker_cython.pyx":480
 *     cdef double new_sim
 *     cdef TopPair pair
 *     while old_heap.size() > 0:             # <<<<<<<<<<<<<<
 *         pair = old_heap.top()
 *         old_heap.pop()
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_old_heap.size() > 0) != 0);
    if (!__pyx_t_1) break;

    /* "debugblock/debugblocker_cython.pyx":481
 *     cdef TopPair pair
 *     while old_heap.size() > 0:
 *         pair = old_heap.top()             # <<<<<<<<<<<<<<
 *         old_heap.pop()
 * 
 */
    __pyx_v_pair = __pyx_v_old_heap.top();

    /* "debugblock/debugblocker_cython.pyx":482
 *     while old_heap.size() > 0:
 *         pair = old_heap.top()
 *         old_heap.pop()             # <<<<<<<<<<<<<<
 * 
 *         new_sim = init_topk_heap_calc_sim(ltoken_vector[pair.l_rec], rtoken_vector[pair.r_rec])
 */
    __pyx_v_old_heap.pop();

    /* "debugblock/debugblocker_cython.pyx":484
 *         old_heap.pop()
 * 
 *         new_sim = init_topk_heap_calc_sim(ltoken_vector[pair.l_rec], rtoken_vector[pair.r_rec])             # <<<<<<<<<<<<<<
 *         if new_sim > 0:
 *             new_heap.push_back(TopPair(new_sim, pair.l_rec, pair.r_rec))
 */
    __pyx_v_new_sim = __pyx_f_10debugblock_19debugblocker_cython_init_topk_heap_calc_sim((__pyx_v_ltoken_vector[__pyx_v_pair.l_rec]), (__pyx_v_rtoken_vector[__pyx_v_pair.r_rec]));

    /* "debugblock/debugblocker_cython.pyx":485
 * 
 *         new_sim = init_topk_heap_calc_sim(ltoken_vector[pair.l_rec], rtoken_vector[pair.r_rec])
 *         if new_sim > 0:             # <<<<<<<<<<<<<<
 *             new_heap.push_back(TopPair(new_sim, pair.l_rec, pair.r_rec))
 * 
 */
    __pyx_t_1 = ((__pyx_v_new_sim > 0.0) != 0);
    if (__pyx_t_1) {

      /* "debugblock/debugblocker_cython.pyx":486
 *         new_sim = init_topk_heap_calc_sim(ltoken_vector[pair.l_rec], rtoken_vector[pair.r_rec])
 *         if new_sim > 0:
 *             new_heap.push_back(TopPair(new_sim, pair.l_rec, pair.r_rec))             # <<<<<<<<<<<<<<
 * 
 *     return
 */
      try {
        __pyx_v_new_heap.push_back(TopPair(__pyx_v_new_sim, __pyx_v_pair.l_rec, __pyx_v_pair.r_rec));
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "debugblock/debugblocker_cython.pyx":485
 * 
 *         new_sim = init_topk_heap_calc_sim(ltoken_vector[pair.l_rec], rtoken_vector[pair.r_rec])
 *         if new_sim > 0:             # <<<<<<<<<<<<<<
 *             new_heap.push_back(TopPair(new_sim, pair.l_rec, pair.r_rec))
 * 
 */
    }
  }

  /* "debugblock/debugblocker_cython.pyx":488
 *             new_heap.push_back(TopPair(new_sim, pair.l_rec, pair.r_rec))
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "debugblock/debugblocker_cython.pyx":473
 * 
 * 
 * cdef void init_topk_heap_cython(const vector[vector[int]]& ltoken_vector, const vector[vector[int]]& rtoken_vector,             # <<<<<<<<<<<<<<
 *                                 heap[TopPair]& old_heap, vector[TopPair]& new_heap) nogil:
 *     cdef int a
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.init_topk_heap_cython", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
}

/* "debugblock/debugblocker_cython.pyx":491
 * 
 * 
 * cdef double init_topk_heap_calc_sim(const vector[int]& ltoken_list, const vector[int]& rtoken_list) nogil:             # <<<<<<<<<<<<<<
 *     cdef int overlap = 0
 *     cdef cset[int] rset
 */

static double __pyx_f_10debugblock_19debugblocker_cython_init_topk_heap_calc_sim(std::vector<int>  const &__pyx_v_ltoken_list, std::vector<int>  const &__pyx_v_rtoken_list) {
  int __pyx_v_overlap;
  std::unordered_set<int>  __pyx_v_rset;
  int __pyx_v_denom;
  size_t __pyx_v_i;
  double __pyx_r;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "debugblock/debugblocker_cython.pyx":492
 * 
 * cdef double init_topk_heap_calc_sim(const vector[int]& ltoken_list, const vector[int]& rtoken_list) nogil:
 *     cdef int overlap = 0             # <<<<<<<<<<<<<<
 *     cdef cset[int] rset
 *     cdef int denom = 0
 */
  __pyx_v_overlap = 0;

  /* "debugblock/debugblocker_cython.pyx":494
 *     cdef int overlap = 0
 *     cdef cset[int] rset
 *     cdef int denom = 0             # <<<<<<<<<<<<<<
 *     for i in xrange(rtoken_list.size()):
 *         rset.insert(rtoken_list[i])
 */
  __pyx_v_denom = 0;

  /* "debugblock/debugblocker_cython.pyx":495
 *     cdef cset[int] rset
 *     cdef int denom = 0
 *     for i in xrange(rtoken_list.size()):             # <<<<<<<<<<<<<<
 *         rset.insert(rtoken_list[i])
 * 
 */
  __pyx_t_1 = __pyx_v_rtoken_list.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/debugblocker_cython.pyx":496
 *     cdef int denom = 0
 *     for i in xrange(rtoken_list.size()):
 *         rset.insert(rtoken_list[i])             # <<<<<<<<<<<<<<
 * 
 *     for i in xrange(ltoken_list.size()):
 */
    __pyx_v_rset.insert((__pyx_v_rtoken_list[__pyx_v_i]));
  }

  /* "debugblock/debugblocker_cython.pyx":498
 *         rset.insert(rtoken_list[i])
 * 
 *     for i in xrange(ltoken_list.size()):             # <<<<<<<<<<<<<<
 *         if rset.count(ltoken_list[i]):
 *             overlap += 1
 */
  __pyx_t_1 = __pyx_v_ltoken_list.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/debugblocker_cython.pyx":499
 * 
 *     for i in xrange(ltoken_list.size()):
 *         if rset.count(ltoken_list[i]):             # <<<<<<<<<<<<<<
 *             overlap += 1
 * 
 */
    __pyx_t_3 = (__pyx_v_rset.count((__pyx_v_ltoken_list[__pyx_v_i])) != 0);
    if (__pyx_t_3) {

      /* "debugblock/debugblocker_cython.pyx":500
 *     for i in xrange(ltoken_list.size()):
 *         if rset.count(ltoken_list[i]):
 *             overlap += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_overlap = (__pyx_v_overlap + 1);

      /* "debugblock/debugblocker_cython.pyx":499
 * 
 *     for i in xrange(ltoken_list.size()):
 *         if rset.count(ltoken_list[i]):             # <<<<<<<<<<<<<<
 *             overlap += 1
 * 
 */
    }
  }

  /* "debugblock/debugblocker_cython.pyx":503
 * 
 * 
 *     denom = ltoken_list.size() + rtoken_list.size() - overlap             # <<<<<<<<<<<<<<
 *     if denom == 0:
 *         return 0.0
 */
  __pyx_v_denom = ((__pyx_v_ltoken_list.size() + __pyx_v_rtoken_list.size()) - __pyx_v_overlap);

  /* "debugblock/debugblocker_cython.pyx":504
 * 
 *     denom = ltoken_list.size() + rtoken_list.size() - overlap
 *     if denom == 0:             # <<<<<<<<<<<<<<
 *         return 0.0
 *     return overlap * 1.0 / denom
 */
  __pyx_t_3 = ((__pyx_v_denom == 0) != 0);
  if (__pyx_t_3) {

    /* "debugblock/debugblocker_cython.pyx":505
 *     denom = ltoken_list.size() + rtoken_list.size() - overlap
 *     if denom == 0:
 *         return 0.0             # <<<<<<<<<<<<<<
 *     return overlap * 1.0 / denom
 */
    __pyx_r = 0.0;
    goto __pyx_L0;

    /* "debugblock/debugblocker_cython.pyx":504
 * 
 *     denom = ltoken_list.size() + rtoken_list.size() - overlap
 *     if denom == 0:             # <<<<<<<<<<<<<<
 *         return 0.0
 *     return overlap * 1.0 / denom
 */
  }

  /* "debugblock/debugblocker_cython.pyx":506
 *     if denom == 0:
 *         return 0.0
 *     return overlap * 1.0 / denom             # <<<<<<<<<<<<<<
 */
  __pyx_t_4 = (__pyx_v_overlap * 1.0);
  if (unlikely(__pyx_v_denom == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = (__pyx_t_4 / __pyx_v_denom);
  goto __pyx_L0;

  /* "debugblock/debugblocker_cython.pyx":491
 * 
 * 
 * cdef double init_topk_heap_calc_sim(const vector[int]& ltoken_list, const vector[int]& rtoken_list) nogil:             # <<<<<<<<<<<<<<
 *     cdef int overlap = 0
 *     cdef cset[int] rset
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.init_topk_heap_calc_sim", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "debugblocker_cython",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_FIELD_REMOVE_RATIO, __pyx_k_FIELD_REMOVE_RATIO, sizeof(__pyx_k_FIELD_REMOVE_RATIO), 0, 0, 1, 1},
  {&__pyx_n_s_MINIMAL_NUM_FIELDS, __pyx_k_MINIMAL_NUM_FIELDS, sizeof(__pyx_k_MINIMAL_NUM_FIELDS), 0, 0, 1, 1},
  {&__pyx_n_s_OFFSET_OF_FIELD_NUM, __pyx_k_OFFSET_OF_FIELD_NUM, sizeof(__pyx_k_OFFSET_OF_FIELD_NUM), 0, 0, 1, 1},
  {&__pyx_n_s_PREFIX_MATCH_MAX_SIZE, __pyx_k_PREFIX_MATCH_MAX_SIZE, sizeof(__pyx_k_PREFIX_MATCH_MAX_SIZE), 0, 0, 1, 1},
  {&__pyx_n_s_REC_AVE_LEN_THRES, __pyx_k_REC_AVE_LEN_THRES, sizeof(__pyx_k_REC_AVE_LEN_THRES), 0, 0, 1, 1},
  {&__pyx_kp_s_Users_lihan_Documents_CharmPyWo, __pyx_k_Users_lihan_Documents_CharmPyWo, sizeof(__pyx_k_Users_lihan_Documents_CharmPyWo), 0, 0, 1, 0},
  {&__pyx_kp_s_actual_max_ratio, __pyx_k_actual_max_ratio, sizeof(__pyx_k_actual_max_ratio), 0, 0, 1, 0},
  {&__pyx_n_s_cand_set, __pyx_k_cand_set, sizeof(__pyx_k_cand_set), 0, 0, 1, 1},
  {&__pyx_n_s_debugblock_debugblocker_cython, __pyx_k_debugblock_debugblocker_cython, sizeof(__pyx_k_debugblock_debugblocker_cython), 0, 0, 1, 1},
  {&__pyx_n_s_debugblocker_cython, __pyx_k_debugblocker_cython, sizeof(__pyx_k_debugblocker_cython), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_kp_s_end_time, __pyx_k_end_time, sizeof(__pyx_k_end_time), 0, 0, 1, 0},
  {&__pyx_n_s_field_list, __pyx_k_field_list, sizeof(__pyx_k_field_list), 0, 0, 1, 1},
  {&__pyx_n_s_field_remove_ratio, __pyx_k_field_remove_ratio, sizeof(__pyx_k_field_remove_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init_topk_heap, __pyx_k_init_topk_heap, sizeof(__pyx_k_init_topk_heap), 0, 0, 1, 1},
  {&__pyx_kp_s_join_time, __pyx_k_join_time, sizeof(__pyx_k_join_time), 0, 0, 1, 0},
  {&__pyx_n_s_lfield_vector, __pyx_k_lfield_vector, sizeof(__pyx_k_lfield_vector), 0, 0, 1, 1},
  {&__pyx_n_s_lindex_vector, __pyx_k_lindex_vector, sizeof(__pyx_k_lindex_vector), 0, 0, 1, 1},
  {&__pyx_n_s_lrecord_field_list, __pyx_k_lrecord_field_list, sizeof(__pyx_k_lrecord_field_list), 0, 0, 1, 1},
  {&__pyx_n_s_lrecord_index_list, __pyx_k_lrecord_index_list, sizeof(__pyx_k_lrecord_index_list), 0, 0, 1, 1},
  {&__pyx_n_s_lrecord_token_list, __pyx_k_lrecord_token_list, sizeof(__pyx_k_lrecord_token_list), 0, 0, 1, 1},
  {&__pyx_n_s_ltable_field_token_sum, __pyx_k_ltable_field_token_sum, sizeof(__pyx_k_ltable_field_token_sum), 0, 0, 1, 1},
  {&__pyx_n_s_ltoken_sum, __pyx_k_ltoken_sum, sizeof(__pyx_k_ltoken_sum), 0, 0, 1, 1},
  {&__pyx_n_s_ltoken_vector, __pyx_k_ltoken_vector, sizeof(__pyx_k_ltoken_vector), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_field_num, __pyx_k_max_field_num, sizeof(__pyx_k_max_field_num), 0, 0, 1, 1},
  {&__pyx_n_s_minimal_num_fields, __pyx_k_minimal_num_fields, sizeof(__pyx_k_minimal_num_fields), 0, 0, 1, 1},
  {&__pyx_n_s_offset_of_field_num, __pyx_k_offset_of_field_num, sizeof(__pyx_k_offset_of_field_num), 0, 0, 1, 1},
  {&__pyx_n_s_output_path, __pyx_k_output_path, sizeof(__pyx_k_output_path), 0, 0, 1, 1},
  {&__pyx_n_s_output_size, __pyx_k_output_size, sizeof(__pyx_k_output_size), 0, 0, 1, 1},
  {&__pyx_n_s_prefix_match_max_size, __pyx_k_prefix_match_max_size, sizeof(__pyx_k_prefix_match_max_size), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_py_cand_set, __pyx_k_py_cand_set, sizeof(__pyx_k_py_cand_set), 0, 0, 1, 1},
  {&__pyx_n_s_py_num_fields, __pyx_k_py_num_fields, sizeof(__pyx_k_py_num_fields), 0, 0, 1, 1},
  {&__pyx_n_s_py_output_path, __pyx_k_py_output_path, sizeof(__pyx_k_py_output_path), 0, 0, 1, 1},
  {&__pyx_n_s_py_output_size, __pyx_k_py_output_size, sizeof(__pyx_k_py_output_size), 0, 0, 1, 1},
  {&__pyx_n_s_py_use_new_topk, __pyx_k_py_use_new_topk, sizeof(__pyx_k_py_use_new_topk), 0, 0, 1, 1},
  {&__pyx_n_s_py_use_parallel, __pyx_k_py_use_parallel, sizeof(__pyx_k_py_use_parallel), 0, 0, 1, 1},
  {&__pyx_n_s_py_use_plain, __pyx_k_py_use_plain, sizeof(__pyx_k_py_use_plain), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rec_ave_len_thres, __pyx_k_rec_ave_len_thres, sizeof(__pyx_k_rec_ave_len_thres), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_kp_s_required_remove_field_ratio, __pyx_k_required_remove_field_ratio, sizeof(__pyx_k_required_remove_field_ratio), 0, 0, 1, 0},
  {&__pyx_n_s_reuse_set, __pyx_k_reuse_set, sizeof(__pyx_k_reuse_set), 0, 0, 1, 1},
  {&__pyx_n_s_reversed, __pyx_k_reversed, sizeof(__pyx_k_reversed), 0, 0, 1, 1},
  {&__pyx_n_s_rfield_vector, __pyx_k_rfield_vector, sizeof(__pyx_k_rfield_vector), 0, 0, 1, 1},
  {&__pyx_n_s_rindex_vector, __pyx_k_rindex_vector, sizeof(__pyx_k_rindex_vector), 0, 0, 1, 1},
  {&__pyx_n_s_rrecord_field_list, __pyx_k_rrecord_field_list, sizeof(__pyx_k_rrecord_field_list), 0, 0, 1, 1},
  {&__pyx_n_s_rrecord_index_list, __pyx_k_rrecord_index_list, sizeof(__pyx_k_rrecord_index_list), 0, 0, 1, 1},
  {&__pyx_n_s_rrecord_token_list, __pyx_k_rrecord_token_list, sizeof(__pyx_k_rrecord_token_list), 0, 0, 1, 1},
  {&__pyx_n_s_rtable_field_token_sum, __pyx_k_rtable_field_token_sum, sizeof(__pyx_k_rtable_field_token_sum), 0, 0, 1, 1},
  {&__pyx_n_s_rtoken_sum, __pyx_k_rtoken_sum, sizeof(__pyx_k_rtoken_sum), 0, 0, 1, 1},
  {&__pyx_n_s_rtoken_vector, __pyx_k_rtoken_vector, sizeof(__pyx_k_rtoken_vector), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_kp_s_too_few_lists, __pyx_k_too_few_lists, sizeof(__pyx_k_too_few_lists), 0, 0, 1, 0},
  {&__pyx_n_s_topk_lists, __pyx_k_topk_lists, sizeof(__pyx_k_topk_lists), 0, 0, 1, 1},
  {&__pyx_n_s_use_new_topk, __pyx_k_use_new_topk, sizeof(__pyx_k_use_new_topk), 0, 0, 1, 1},
  {&__pyx_n_s_use_parallel, __pyx_k_use_parallel, sizeof(__pyx_k_use_parallel), 0, 0, 1, 1},
  {&__pyx_n_s_use_plain, __pyx_k_use_plain, sizeof(__pyx_k_use_plain), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_reversed = __Pyx_GetBuiltinName(__pyx_n_s_reversed); if (!__pyx_builtin_reversed) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "debugblock/debugblocker_cython.pyx":70
 * FIELD_REMOVE_RATIO = 0.1
 * 
 * def debugblocker_cython(lrecord_token_list, rrecord_token_list,             # <<<<<<<<<<<<<<
 *                         lrecord_index_list, rrecord_index_list,
 *                         lrecord_field_list, rrecord_field_list,
 */
  __pyx_tuple__2 = PyTuple_Pack(40, __pyx_n_s_lrecord_token_list, __pyx_n_s_rrecord_token_list, __pyx_n_s_lrecord_index_list, __pyx_n_s_rrecord_index_list, __pyx_n_s_lrecord_field_list, __pyx_n_s_rrecord_field_list, __pyx_n_s_ltable_field_token_sum, __pyx_n_s_rtable_field_token_sum, __pyx_n_s_py_cand_set, __pyx_n_s_py_num_fields, __pyx_n_s_py_output_size, __pyx_n_s_py_output_path, __pyx_n_s_py_use_plain, __pyx_n_s_py_use_new_topk, __pyx_n_s_py_use_parallel, __pyx_n_s_output_path, __pyx_n_s_use_plain, __pyx_n_s_use_new_topk, __pyx_n_s_use_parallel, __pyx_n_s_ltoken_vector, __pyx_n_s_rtoken_vector, __pyx_n_s_lindex_vector, __pyx_n_s_rindex_vector, __pyx_n_s_lfield_vector, __pyx_n_s_rfield_vector, __pyx_n_s_ltoken_sum, __pyx_n_s_rtoken_sum, __pyx_n_s_cand_set, __pyx_n_s_field_list, __pyx_n_s_i, __pyx_n_s_output_size, __pyx_n_s_prefix_match_max_size, __pyx_n_s_rec_ave_len_thres, __pyx_n_s_offset_of_field_num, __pyx_n_s_minimal_num_fields, __pyx_n_s_field_remove_ratio, __pyx_n_s_topk_lists, __pyx_n_s_reuse_set, __pyx_n_s_init_topk_heap, __pyx_n_s_max_field_num); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(15, 0, 40, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__2, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_lihan_Documents_CharmPyWo, __pyx_n_s_debugblocker_cython, 70, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  /* InitThreads.init */
  #ifdef WITH_THREAD
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_float_0_1 = PyFloat_FromDouble(0.1); if (unlikely(!__pyx_float_0_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_20 = PyInt_FromLong(20); if (unlikely(!__pyx_int_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initdebugblocker_cython(void); /*proto*/
PyMODINIT_FUNC initdebugblocker_cython(void)
#else
PyMODINIT_FUNC PyInit_debugblocker_cython(void); /*proto*/
PyMODINIT_FUNC PyInit_debugblocker_cython(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_debugblocker_cython(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("debugblocker_cython", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_debugblock__debugblocker_cython) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "debugblock.debugblocker_cython")) {
      if (unlikely(PyDict_SetItemString(modules, "debugblock.debugblocker_cython", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif

  /* "debugblock/debugblocker_cython.pyx":10
 * from libc.stdint cimport uint32_t as uint, uint64_t
 * from cython.parallel import prange, parallel
 * import time             # <<<<<<<<<<<<<<
 * 
 * # include "new_topk_sim_join.pyx"
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_time, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "debugblock/debugblocker_cython.pyx":64
 * 
 * 
 * PREFIX_MATCH_MAX_SIZE = 5             # <<<<<<<<<<<<<<
 * REC_AVE_LEN_THRES = 20
 * OFFSET_OF_FIELD_NUM = 10
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PREFIX_MATCH_MAX_SIZE, __pyx_int_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "debugblock/debugblocker_cython.pyx":65
 * 
 * PREFIX_MATCH_MAX_SIZE = 5
 * REC_AVE_LEN_THRES = 20             # <<<<<<<<<<<<<<
 * OFFSET_OF_FIELD_NUM = 10
 * MINIMAL_NUM_FIELDS = 0
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_REC_AVE_LEN_THRES, __pyx_int_20) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "debugblock/debugblocker_cython.pyx":66
 * PREFIX_MATCH_MAX_SIZE = 5
 * REC_AVE_LEN_THRES = 20
 * OFFSET_OF_FIELD_NUM = 10             # <<<<<<<<<<<<<<
 * MINIMAL_NUM_FIELDS = 0
 * FIELD_REMOVE_RATIO = 0.1
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OFFSET_OF_FIELD_NUM, __pyx_int_10) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "debugblock/debugblocker_cython.pyx":67
 * REC_AVE_LEN_THRES = 20
 * OFFSET_OF_FIELD_NUM = 10
 * MINIMAL_NUM_FIELDS = 0             # <<<<<<<<<<<<<<
 * FIELD_REMOVE_RATIO = 0.1
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MINIMAL_NUM_FIELDS, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "debugblock/debugblocker_cython.pyx":68
 * OFFSET_OF_FIELD_NUM = 10
 * MINIMAL_NUM_FIELDS = 0
 * FIELD_REMOVE_RATIO = 0.1             # <<<<<<<<<<<<<<
 * 
 * def debugblocker_cython(lrecord_token_list, rrecord_token_list,
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FIELD_REMOVE_RATIO, __pyx_float_0_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "debugblock/debugblocker_cython.pyx":70
 * FIELD_REMOVE_RATIO = 0.1
 * 
 * def debugblocker_cython(lrecord_token_list, rrecord_token_list,             # <<<<<<<<<<<<<<
 *                         lrecord_index_list, rrecord_index_list,
 *                         lrecord_field_list, rrecord_field_list,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_10debugblock_19debugblocker_cython_1debugblocker_cython, NULL, __pyx_n_s_debugblock_debugblocker_cython); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_debugblocker_cython, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "debugblock/debugblocker_cython.pyx":1
 * from libcpp.vector cimport vector             # <<<<<<<<<<<<<<
 * from libcpp.unordered_set cimport unordered_set as cset
 * from libcpp.unordered_map cimport unordered_map as cmap
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init debugblock.debugblocker_cython", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init debugblock.debugblocker_cython");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#endif
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *x) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 2 * PyLong_SHIFT) {
                            return (uint32_t) (((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 3 * PyLong_SHIFT) {
                            return (uint32_t) (((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 4 * PyLong_SHIFT) {
                            return (uint32_t) (((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint32_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint32_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) ((((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, long, PyLong_AsLong(x))
            } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint32_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint32_t) -1;
        }
    } else {
        uint32_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (uint32_t) -1;
        val = __Pyx_PyInt_As_uint32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint32_t");
    return (uint32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint32_t");
    return (uint32_t) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
